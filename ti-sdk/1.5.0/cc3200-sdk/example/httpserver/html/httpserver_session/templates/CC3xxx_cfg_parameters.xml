<?xml version="1.0" encoding="UTF-8"?>
<CC3xxx>
   <XML_VER>1</XML_VER>
   <CustomScript>customJSScript.js</CustomScript>
   <ValuesDefinition>
      <Values name="Security" type="enum">
         <Value val="0">Open</Value>
         <Value val="1">WEP</Value>
         <Value val="2">WPA</Value>
      </Values>
      <Values name="ProfileSecurity" type="enum">
         <Value val="0">Open</Value>
         <Value val="1">WEP</Value>
         <Value val="2">WPA</Value>
         <Value val="3">Peer2Peer</Value>
         <Value val="4">Enterprise</Value>
      </Values>
      <Values name="EapType" type="enum">
         <Value val="13">TLS</Value>
         <Value val="21">TTLS</Value>
         <Value val="25">PEAP</Value>
         <Value val="43">FAST</Value>
      </Values>
      <Values name="EapSubType" type="enum">
         <Value val="0">MSCHAPv2</Value>
         <Value val="16">PSK</Value>
      </Values>
      <Values name="EAPFastProvisioning" type="enum">
         <Value val="0">Unauthenticated</Value>
         <Value val="4">Authenticated</Value>
      </Values>
      <Values name="PEAPVersion" type="enum">
         <Value val="0">Version0</Value>
         <Value val="2">Version1</Value>
      </Values>
      <Values name="Role" type="enum">
         <Value val="0">Station</Value>
         <Value val="2">AP</Value>
         <Value val="3">Peer2Peer_Device</Value>
      </Values>
      <Values name="P2pNegInit" type="enum">
         <Value val="0">Active</Value>
         <Value val="1">Passive</Value>
         <Value val="2">Random</Value>
      </Values>
      <Values name="P2pSecurity" type="enum">
         <Value val="0">P2P_NONE</Value>
         <Value val="1">P2P_PBC</Value>
         <Value val="2">P2P_PIN_KEYPAD</Value>
         <Value val="3">P2P_PIN_DISPLAY</Value>
      </Values>
      <Values name="PowerPolicy" type="enum">
         <Value val="000000143c0001000102">PM_NORMAL</Value>
         <Value val="03000f0a0a0001000102">PM_ACTIVE</Value>
         <Value val="040030023c00e8030505">PM_LONG_SLEEP</Value>
      </Values>
      <Values name="CountryCode" type="enum">
         <Value val="US">US</Value>
         <Value val="EU">EU</Value>
         <Value val="JP">JP</Value>
      </Values>
      <Values name="Addressing" type="enum">
         <Value val="6">Static</Value>
         <Value val="2">Dynamic</Value>
      </Values>
      <Values name="Bool" type="enum">
         <Value val="0">False</Value>
         <Value val="1">True</Value>
      </Values>
      <Values name="State" type="enum">
         <Value val="0">Disable</Value>
         <Value val="1">Enable</Value>
      </Values>
      <Values name="WepKeyFormat" type="enum">
         <Value val="0">Hexadecimal</Value>
         <Value val="1">ASCII</Value>
      </Values>
      <Values name="P2pDeviceChannelsVal" type="enum">
         <Value val="1">1</Value>
         <Value val="6">6</Value>
         <Value val="11">11</Value>
      </Values>
      <Values name="Range_0-15" type="range">
         <Value val="16">0</Value>
      </Values>
      <Values name="Range_1-15" type="range">
         <Value val="15">1</Value>
      </Values>
      <Values name="Range_1-13" type="range">
         <Value val="13">1</Value>
      </Values>
      <Values name="Channels" type="mask">
         <Value val="1">Channel 1</Value>
         <Value val="2">Channel 2</Value>
         <Value val="4">Channel 3</Value>
         <Value val="8">Channel 4</Value>
         <Value val="16">Channel 5</Value>
         <Value val="32">Channel 6</Value>
         <Value val="64">Channel 7</Value>
         <Value val="128">Channel 8</Value>
         <Value val="256">Channel 9</Value>
         <Value val="512">Channel 10</Value>
         <Value val="1024">Channel 11</Value>
         <Value val="2048">Channel 12</Value>
         <Value val="4096">Channel 13</Value>
      </Values>
      <Values name="NetworkApplications_3" type="mask">
         <Value val="1">HTTP server</Value>
         <Value val="4">mDNS client</Value>
         <Value val="16">Device configuration</Value>
      </Values>
      <Values name="NetworkApplications_5" type="mask">
         <Value val="1">HTTP server</Value>
         <Value val="2">DHCP server</Value>
         <Value val="4">mDNS client</Value>
         <Value val="8">DNS server</Value>
         <Value val="16">Device configuration</Value>
      </Values>
      <Values name="IP" type="script">
         <Value val="_value_">var d = _value_.split('.'); var s = ((((((+d[0])*256)+(+d[1]))*256)+(+d[2]))*256)+(+d[3]); s.toString(16);</Value>
      </Values>
   </ValuesDefinition>
   <Conf name="Device Role">
      <Param>
         <Name>DeviceRole</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
   </Conf>
   <Conf name="Station">
      <Param>
         <Name>MacAddress</Name>
         <Filename>/sys/macadd.bin</Filename>
      </Param>
      <Param>
         <Name>StationTxPowerLevel</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
      <Param>
         <Name>OneTimeCalibration</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
      <Param>
         <Name>PowerPolicy</Name>
         <Filename>/sys/pmcfg.ini</Filename>
      </Param>
      <Param>
         <Name>LongSleepInterval</Name>
         <Filename>/sys/pmcfg.ini</Filename>
      </Param>
      <Param>
         <Name>ScanChannelMask</Name>
         <Filename>/sys/stacfg.ini</Filename>
      </Param>
      <Param>
         <Name>ScanRSSIThreshold</Name>
         <Filename>/sys/stacfg.ini</Filename>
      </Param>
      <Param>
         <Name>StationAddressingScheme</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>StationIPAddress</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>StationSubnetMask</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>StationDefaultGateway</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>StationDNSServer</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>StationNetworkApplications</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
   </Conf>
   <Conf name="AP">
      <Param>
         <Name>MacAddress</Name>
         <Filename>/sys/macadd.bin</Filename>
      </Param>
      <Param>
         <Name>SSID</Name>
         <Filename>/sys/ap.cfg</Filename>
      </Param>
      <Param>
         <Name>SecurityType</Name>
         <Filename>/sys/ap.cfg</Filename>
      </Param>
      <Param>
         <Name>WEPKeyFormat</Name>
         <Filename>/sys/ap.cfg</Filename>
      </Param>
      <Param>
         <Name>Password</Name>
         <Filename>/sys/ap.cfg</Filename>
      </Param>
      <Param>
         <Name>CountryCode</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
      <Param>
         <Name>Channel</Name>
         <Filename>/sys/ap.cfg</Filename>
      </Param>
      <Param>
         <Name>HiddenSSID</Name>
         <Filename>/sys/ap.cfg</Filename>
      </Param>
      <Param>
         <Name>DeviceDomainName</Name>
         <Filename>/sys/devname.cfg</Filename>
      </Param>
      <Param>
         <Name>APTxPowerLevel</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
      <Param>
         <Name>OneTimeCalibration</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
      <Param>
         <Name>IgnoreForceAP</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
      <Param>
         <Name>BeaconInterval</Name>
         <Filename>/sys/ap.cfg</Filename>
      </Param>
      <Param>
         <Name>DTIMInterval</Name>
         <Filename>/sys/ap.cfg</Filename>
      </Param>
      <Param>
         <Name>ApAddressingScheme</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>ApIPAddress</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>ApSubnetMask</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>ApDefaultGateway</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>ApDNSServer</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>ApNetworkApplications</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
   </Conf>
   <Conf name="P2P">
      <Param>
         <Name>MacAddress</Name>
         <Filename>/sys/macadd.bin</Filename>
      </Param>
      <Param>
         <Name>StationTxPowerLevel</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
      <Param>
         <Name>APTxPowerLevel</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
      <Param>
         <Name>OneTimeCalibration</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
      <Param>
         <Name>PowerPolicy</Name>
         <Filename>/sys/pmcfg.ini</Filename>
      </Param>
      <Param>
         <Name>LongSleepInterval</Name>
         <Filename>/sys/pmcfg.ini</Filename>
      </Param>
      <Param>
         <Name>Peer2PeerDeviceType</Name>
         <Filename>/sys/p2p.cfg</Filename>
      </Param>
      <Param>
         <Name>DeviceURNName</Name>
         <Filename>/sys/devname.cfg</Filename>
      </Param>
      <Param>
         <Name>Peer2PeerListenRegClass</Name>
         <Filename>/sys/p2p.cfg</Filename>
      </Param>
      <Param>
         <Name>Peer2PeerListenChannels</Name>
         <Filename>/sys/p2p.cfg</Filename>
      </Param>
      <Param>
         <Name>Peer2PeerOperRegClass</Name>
         <Filename>/sys/p2p.cfg</Filename>
      </Param>
      <Param>
         <Name>Peer2PeerOperChannels</Name>
         <Filename>/sys/p2p.cfg</Filename>
      </Param>
      <Param>
         <Name>Peer2PeerIntent</Name>
         <Filename>/sys/stacfg.ini</Filename>
      </Param>
      <Param>
         <Name>Peer2PeerNegotiationInitiator</Name>
         <Filename>/sys/stacfg.ini</Filename>
      </Param>
      <Param>
         <Name>StationAddressingScheme</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>StationIPAddress</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>StationSubnetMask</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>StationDefaultGateway</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>StationDNSServer</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>ApAddressingScheme</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>ApIPAddress</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>ApSubnetMask</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>ApDefaultGateway</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>ApDNSServer</Name>
         <Filename>/sys/ipcfg.ini</Filename>
      </Param>
      <Param>
         <Name>Peer2PeerClientNetworkApplications</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
      <Param>
         <Name>Peer2PeerGroupOwnerNetworkApplications</Name>
         <Filename>/sys/mode.cfg</Filename>
      </Param>
   </Conf>
   <Conf name="Profiles">
      <Param>
         <Name>AutoStartEnable</Name>
         <Filename>/sys/stacfg.ini</Filename>
      </Param>
      <Param>
         <Name>FastConnectEnable</Name>
         <Filename>/sys/stacfg.ini</Filename>
      </Param>
      <Param>
         <Name>AutoSmartConfig</Name>
         <Filename>/sys/stacfg.ini</Filename>
      </Param>
      <Param>
         <Name>ConnectToOpenAP</Name>
         <Filename>/sys/stacfg.ini</Filename>
      </Param>
      <Param>
         <Name>ConnectToAnyPeer2Peer</Name>
         <Filename>/sys/stacfg.ini</Filename>
      </Param>
   </Conf>
   <Conf name="Profile1">
      <Param>
         <Name>Profile1Disabled</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1SSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1SSIDLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1Priority</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1BSSIDSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1BSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1SecurityType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1P2pSecurity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1P2pPin</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1WepKeyFormat</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1WepKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1WepKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1WpaKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1WpaKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1PMK</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1EAPType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1UserIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1UserIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1AnonymousIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1AnonymousIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1UserPassword</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1UserPasswordLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1EapCredentials</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1EAPSubType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1PEAPVersion</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1EAPFastProvisioning</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1EapMethod</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1PmkSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1PairwiseCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1GroupCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1KeyManagement</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1SecProto</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1AuthAlgo</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1ScanSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1EapFlags</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1EapFragmentSize</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1EapWA</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1WpaHandshake</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1EapClientCert</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1EapPrivateKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile1EapFastPac</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
   </Conf>
   <Conf name="Profile2">
      <Param>
         <Name>Profile2Disabled</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2SSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2SSIDLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2Priority</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2BSSIDSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2BSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2SecurityType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2P2pSecurity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2P2pPin</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2WepKeyFormat</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2WepKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2WepKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2WpaKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2WpaKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2PMK</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2EAPType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2UserIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2UserIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2AnonymousIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2AnonymousIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2UserPassword</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2UserPasswordLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2EapCredentials</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2EAPSubType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2PEAPVersion</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2EAPFastProvisioning</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2EapMethod</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2PmkSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2PairwiseCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2GroupCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2KeyManagement</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2SecProto</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2AuthAlgo</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2ScanSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2EapFlags</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2EapFragmentSize</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2EapWA</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2WpaHandshake</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2EapClientCert</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2EapPrivateKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile2EapFastPac</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
   </Conf>
   <Conf name="Profile3">
      <Param>
         <Name>Profile3Disabled</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3SSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3SSIDLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3Priority</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3BSSIDSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3BSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3SecurityType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3P2pSecurity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3P2pPin</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3WepKeyFormat</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3WepKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3WepKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3WpaKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3WpaKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3PMK</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3EAPType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3UserIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3UserIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3AnonymousIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3AnonymousIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3UserPassword</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3UserPasswordLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3EapCredentials</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3EAPSubType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3PEAPVersion</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3EAPFastProvisioning</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3EapMethod</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3PmkSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3PairwiseCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3GroupCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3KeyManagement</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3SecProto</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3AuthAlgo</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3ScanSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3EapFlags</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3EapFragmentSize</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3EapWA</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3WpaHandshake</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3EapClientCert</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3EapPrivateKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile3EapFastPac</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
   </Conf>
   <Conf name="Profile4">
      <Param>
         <Name>Profile4Disabled</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4SSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4SSIDLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4Priority</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4BSSIDSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4BSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4SecurityType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4P2pSecurity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4P2pPin</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4WepKeyFormat</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4WepKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4WepKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4WpaKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4WpaKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4PMK</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4EAPType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4UserIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4UserIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4AnonymousIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4AnonymousIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4UserPassword</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4UserPasswordLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4EapCredentials</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4EAPSubType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4PEAPVersion</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4EAPFastProvisioning</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4EapMethod</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4PmkSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4PairwiseCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4GroupCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4KeyManagement</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4SecProto</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4AuthAlgo</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4ScanSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4EapFlags</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4EapFragmentSize</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4EapWA</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4WpaHandshake</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4EapClientCert</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4EapPrivateKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile4EapFastPac</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
   </Conf>
   <Conf name="Profile5">
      <Param>
         <Name>Profile5Disabled</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5SSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5SSIDLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5Priority</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5BSSIDSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5BSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5SecurityType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5P2pSecurity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5P2pPin</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5WepKeyFormat</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5WepKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5WepKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5WpaKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5WpaKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5PMK</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5EAPType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5UserIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5UserIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5AnonymousIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5AnonymousIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5UserPassword</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5UserPasswordLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5EapCredentials</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5EAPSubType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5PEAPVersion</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5EAPFastProvisioning</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5EapMethod</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5PmkSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5PairwiseCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5GroupCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5KeyManagement</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5SecProto</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5AuthAlgo</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5ScanSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5EapFlags</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5EapFragmentSize</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5EapWA</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5WpaHandshake</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5EapClientCert</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5EapPrivateKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile5EapFastPac</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
   </Conf>
   <Conf name="Profile6">
      <Param>
         <Name>Profile6Disabled</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6SSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6SSIDLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6Priority</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6BSSIDSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6BSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6SecurityType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6P2pSecurity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6P2pPin</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6WepKeyFormat</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6WepKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6WepKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6WpaKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6WpaKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6PMK</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6EAPType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6UserIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6UserIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6AnonymousIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6AnonymousIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6UserPassword</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6UserPasswordLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6EapCredentials</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6EAPSubType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6PEAPVersion</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6EAPFastProvisioning</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6EapMethod</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6PmkSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6PairwiseCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6GroupCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6KeyManagement</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6SecProto</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6AuthAlgo</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6ScanSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6EapFlags</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6EapFragmentSize</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6EapWA</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6WpaHandshake</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6EapClientCert</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6EapPrivateKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile6EapFastPac</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
   </Conf>
   <Conf name="Profile7">
      <Param>
         <Name>Profile7Disabled</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7SSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7SSIDLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7Priority</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7BSSIDSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7BSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7SecurityType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7P2pSecurity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7P2pPin</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7WepKeyFormat</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7WepKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7WepKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7WpaKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7WpaKeyLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7PMK</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7EAPType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7UserIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7UserIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7AnonymousIdentity</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7AnonymousIdentityLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7UserPassword</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7UserPasswordLen</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7EapCredentials</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7EAPSubType</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7PEAPVersion</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7EAPFastProvisioning</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7EapMethod</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7PmkSet</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7PairwiseCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7GroupCipher</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7KeyManagement</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7SecProto</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7AuthAlgo</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7ScanSSID</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7EapFlags</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7EapFragmentSize</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7EapWA</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7WpaHandshake</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7EapClientCert</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7EapPrivateKey</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
      <Param>
         <Name>Profile7EapFastPac</Name>
         <Filename>/sys/pref.net</Filename>
      </Param>
   </Conf>
   <Conf name="HTTP Server">
      <Param>
         <Name>HTTPServerPort</Name>
         <Filename>/sys/httpsrv.cfg</Filename>
      </Param>
      <Param>
         <Name>HTTPServerAccessRomPages</Name>
         <Filename>/sys/httpsrv.cfg</Filename>
      </Param>
      <Param>
         <Name>HTTPServerAuth</Name>
         <Filename>/sys/httpsrv.cfg</Filename>
      </Param>
      <Param>
         <Name>HTTPServerUser</Name>
         <Filename>/sys/httpsrv.cfg</Filename>
      </Param>
      <Param>
         <Name>HTTPServerPass</Name>
         <Filename>/sys/httpsrv.cfg</Filename>
      </Param>
      <Param>
         <Name>HTTPServerRealm</Name>
         <Filename>/sys/httpsrv.cfg</Filename>
      </Param>
   </Conf>
   <Conf name="DHCP Server">
      <Param>
         <Name>DHCPServerLeaseTime</Name>
         <Filename>/sys/dhcpsrv.cfg</Filename>
      </Param>
      <Param>
         <Name>DHCPServerIPStart</Name>
         <Filename>/sys/dhcpsrv.cfg</Filename>
      </Param>
      <Param>
         <Name>DHCPServerIPEnd</Name>
         <Filename>/sys/dhcpsrv.cfg</Filename>
      </Param>
   </Conf>
   <Conf name="mDNS Client">
      <Param>
         <Name>DeviceURNName</Name>
         <Filename>/sys/devname.cfg</Filename>
      </Param>
   </Conf>
   <Conf name="mDNSClient1">
      <Param>
         <Name>mDNSClient1Status</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient1ServiceName</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient1ServiceNameLen</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient1TextRecord</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient1TextRecordLen</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient1Port</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient1TTL</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
   </Conf>
   <Conf name="mDNSClient2">
      <Param>
         <Name>mDNSClient2Status</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient2ServiceName</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient2ServiceNameLen</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient2TextRecord</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient2TextRecordLen</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient2Port</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient2TTL</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
   </Conf>
   <Conf name="mDNSClient3">
      <Param>
         <Name>mDNSClient3Status</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient3ServiceName</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient3ServiceNameLen</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient3TextRecord</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient3TextRecordLen</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient3Port</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient3TTL</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
   </Conf>
   <Conf name="mDNSClient4">
      <Param>
         <Name>mDNSClient4Status</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient4ServiceName</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient4ServiceNameLen</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient4TextRecord</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient4TextRecordLen</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient4Port</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient4TTL</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
   </Conf>
   <Conf name="mDNSClient5">
      <Param>
         <Name>mDNSClient5Status</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient5ServiceName</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient5ServiceNameLen</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient5TextRecord</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient5TextRecordLen</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient5Port</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
      <Param>
         <Name>mDNSClient5TTL</Name>
         <Filename>/sys/mdns.cfg</Filename>
      </Param>
   </Conf>
   <Conf name="Smart Config">
      <Param>
         <Name>DefaultGroupId</Name>
         <Filename>/sys/smartconfigkeys.cfg</Filename>
      </Param>
      <Param>
         <Name>DefaultGroupKey</Name>
         <Filename>/sys/smartconfigkeys.cfg</Filename>
      </Param>
      <Param>
         <Name>DefaultGroupKeyLen</Name>
         <Filename>/sys/smartconfigkeys.cfg</Filename>
      </Param>
      <Param>
         <Name>GroupId1</Name>
         <Filename>/sys/smartconfigkeys.cfg</Filename>
      </Param>
      <Param>
         <Name>GroupKey1</Name>
         <Filename>/sys/smartconfigkeys.cfg</Filename>
      </Param>
      <Param>
         <Name>GroupKey1Len</Name>
         <Filename>/sys/smartconfigkeys.cfg</Filename>
      </Param>
      <Param>
         <Name>GroupId2</Name>
         <Filename>/sys/smartconfigkeys.cfg</Filename>
      </Param>
      <Param>
         <Name>GroupKey2</Name>
         <Filename>/sys/smartconfigkeys.cfg</Filename>
      </Param>
      <Param>
         <Name>GroupKey2Len</Name>
         <Filename>/sys/smartconfigkeys.cfg</Filename>
      </Param>
   </Conf>
   <ParamList>
      <Param type="xb" size="6" script="assertValidateMACaddress(MacAddress)">
         <Name>MacAddress</Name>
         <Default></Default>
         <Desc>6 bytes MAC address written in HEX format, e.g. 12:34:56:78:90:ab. Note that it is restricted to set the LSB of the most significant byte</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="1" valtype="Role">
         <Name>DeviceRole</Name>
         <Default>Station</Default>
         <Desc>WiFi role of the device. Single selection between Station, AP and Peer2Peer Device</Desc>
         <Offset>20</Offset>
      </Param>
      <Param type="u" size="1" valtype="Bool">
         <Name>IgnoreForceAP</Name>
         <Default>False</Default>
         <Desc>Applicable for CC3100 only. In case AP is forced via GPIO, setting this option makes the device boot as open AP</Desc>
         <Offset>21</Offset>
      </Param>
      <Param type="st" size="3" valtype="CountryCode">
         <Name>CountryCode</Name>
         <Default>US</Default>
         <Desc>Country Code for regulatory. Supported country codes are: 'US', 'EU' or 'JP'</Desc>
         <Offset>48</Offset>
      </Param>
      <Param type="xl" size="4" valtype="NetworkApplications_3">
         <Name>StationNetworkApplications</Name>
         <Default>5</Default>
         <Desc>Enabled network applications. Applicable to station role. Multiple choice between HTTP server, mDNS client and Device configuration</Desc>
         <Offset>24</Offset>
      </Param>
      <Param type="xl" size="4" valtype="NetworkApplications_5">
         <Name>ApNetworkApplications</Name>
         <Default>7</Default>
         <Desc>Enabled network applications. Applicable to AP role. Multiple choice between HTTP server, DHCP server, mDNS client, DNS server and Device configuration</Desc>
         <Offset>28</Offset>
      </Param>
      <Param type="xl" size="4" valtype="NetworkApplications_3">
         <Name>Peer2PeerClientNetworkApplications</Name>
         <Default>5</Default>
         <Desc>Enabled network applications. Applicable to Peer2Peer client role. Multiple choice between HTTP server, mDNS client and Device configuration</Desc>
         <Offset>32</Offset>
      </Param>
      <Param type="xl" size="4" valtype="NetworkApplications_5">
         <Name>Peer2PeerGroupOwnerNetworkApplications</Name>
         <Default>7</Default>
         <Desc>Enabled network applications. Applicable to Peer2Peer group owner role. Multiple choice between HTTP server, DHCP server, mDNS client, DNS server and Device configuration</Desc>
         <Offset>36</Offset>
      </Param>
      <Param type="u" size="4" valtype="Range_0-15">
         <Name>StationTxPowerLevel</Name>
         <Default>0</Default>
         <Desc>Number in range 0-15dB, indicating a back-off from MAX power. Applicable to station and Peer2Peer client role</Desc>
         <Offset>40</Offset>
      </Param>
      <Param type="u" size="4" valtype="Range_0-15">
         <Name>APTxPowerLevel</Name>
         <Default>0</Default>
         <Desc>Number in range 0-15dB, indicating a back-off from MAX power. Applicable to AP and Peer2Peer group owner role</Desc>
         <Offset>44</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" valtype="Bool">
         <Name>OneTimeCalibration</Name>
         <Default>False</Default>
         <Desc>Setting this parameter would make the device calibrate only once, ignoring periodic calibration as a result of duration/temperature</Desc>
         <Offset>51</Offset>
      </Param>
      <Param type="u" size="1" valtype="Addressing">
         <Name>StationAddressingScheme</Name>
         <Default>Dynamic</Default>
         <Desc>Setting static IP parameters or get it dynamically via DHCP. Applicable to station and Peer2Peer client role</Desc>
         <Offset>16</Offset>
      </Param>
      <Param type="xl" size="4" valtype="IP" cond="StationAddressingScheme==Static" script="Verify_SubnetMask_IPaddress_DefaultGateway(StationSubnetMask,StationIPAddress,StationDefaultGateway); assertValidateIPaddress(StationIPAddress)">
         <Name>StationIPAddress</Name>
         <Default>0.0.0.0</Default>
         <Desc>IP address is relevant in case of Static Addressing scheme only. E.g. 192.168.1.1. Applicable to station and Peer2Peer client roles only. Note that Station IP and Station Default Gateway must reside on the same network.</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="xl" size="4" valtype="IP" cond="StationAddressingScheme==Static" script="Verify_SubnetMask_IPaddress_DefaultGateway(StationSubnetMask,StationIPAddress,StationDefaultGateway); assertValidateSubnetMaskAddress(StationSubnetMask)">
         <Name>StationSubnetMask</Name>
         <Default>0.0.0.0</Default>
         <Desc>Subnet Mask is relevant in case of Static Addressing scheme only. E.g. 255.255.255.0. Applicable to station and Peer2Peer client roles only</Desc>
         <Offset>4</Offset>
      </Param>
      <Param type="xl" size="4" valtype="IP" cond="StationAddressingScheme==Static" script="Verify_SubnetMask_IPaddress_DefaultGateway(StationSubnetMask,StationIPAddress,StationDefaultGateway); assertValidateIPaddress(StationDefaultGateway)">
         <Name>StationDefaultGateway</Name>
         <Default>0.0.0.0</Default>
         <Desc>Default Gateway is relevant in case of Static Addressing scheme only. E.g. 192.168.1.254. Applicable to station and Peer2Peer client roles only. Note that Station IP and Station Default Gateway must reside on the same network.</Desc>
         <Offset>8</Offset>
      </Param>
      <Param type="xl" size="4" valtype="IP" cond="StationAddressingScheme==Static" script="assertValidateIPaddress(StationDNSServer)">
         <Name>StationDNSServer</Name>
         <Default>0.0.0.0</Default>
         <Desc>DNS Server is relevant in case of Static Addressing scheme only. E.g. 192.168.1.254. Applicable to station and Peer2Peer client roles only</Desc>
         <Offset>12</Offset>
      </Param>
      <Param type="u" size="1" valtype="Addressing">
         <Name>ApAddressingScheme</Name>
         <Default>Static</Default>
         <Desc>Setting static IP parameters or get it dynamically via DHCP. Applicable to AP and Peer2Peer group owner role</Desc>
         <Offset>116</Offset>
      </Param>
      <Param type="xl" size="4" valtype="IP" cond="ApAddressingScheme==Static" script="Verify_SubnetMask_IPaddress_DefaultGateway(ApSubnetMask,ApIPAddress,ApDefaultGateway); assertValidateIPaddress(ApIPAddress)">
         <Name>ApIPAddress</Name>
         <Default>192.168.1.1</Default>
         <Desc>IP address is relevant in case of Static Addressing scheme only. E.g. 192.168.1.1. Applicable to AP and Peer2Peer group owner roles only. Note that AP IP and AP Default Gateway must reside on the same network.</Desc>
         <Offset>100</Offset>
      </Param>
      <Param type="xl" size="4" valtype="IP" cond="ApAddressingScheme==Static" script="Verify_SubnetMask_IPaddress_DefaultGateway(ApSubnetMask,ApIPAddress,ApDefaultGateway); assertValidateSubnetMaskAddress(ApSubnetMask)">
         <Name>ApSubnetMask</Name>
         <Default>255.255.255.0</Default>
         <Desc>Subnet Mask is relevant in case of Static Addressing scheme only. E.g. 255.255.255.0. Applicable to AP and Peer2Peer group owner roles only</Desc>
         <Offset>104</Offset>
      </Param>
      <Param type="xl" size="4" valtype="IP" cond="ApAddressingScheme==Static" script="Verify_SubnetMask_IPaddress_DefaultGateway(ApSubnetMask,ApIPAddress,ApDefaultGateway); assertValidateIPaddress(ApDefaultGateway)">
         <Name>ApDefaultGateway</Name>
         <Default>192.168.1.1</Default>
         <Desc>Default Gateway is relevant in case of Static Addressing scheme only. E.g. 192.168.1.254. Applicable to AP and Peer2Peer group owner roles only. Note that AP IP and AP Default Gateway must reside on the same network.</Desc>
         <Offset>108</Offset>
      </Param>
      <Param type="xl" size="4" valtype="IP" cond="ApAddressingScheme==Static" script="assertValidateIPaddress(ApDNSServer)">
         <Name>ApDNSServer</Name>
         <Default>192.168.1.1</Default>
         <Desc>DNS Server is relevant in case of Static Addressing scheme only. E.g. 192.168.1.254. Applicable to AP and Peer2Peer group owner roles only</Desc>
         <Offset>112</Offset>
      </Param>
      <Param type="u" size="1" valtype="Range_1-13">
         <Name>Channel</Name>
         <Default>6</Default>
         <Desc>Operating WiFi channel. Number in range 1-13</Desc>
         <Offset>22</Offset>
      </Param>
      <Param type="u" size="1" valtype="Bool">
         <Name>HiddenSSID</Name>
         <Default>False</Default>
         <Desc>Setting this option makes SSID not being broadcast in AP role</Desc>
         <Offset>23</Offset>
      </Param>
      <Param type="st" size="33" script="assertEqualOrLessLen(32, SSID)">
         <Name>SSID</Name>
         <Default>mysimplelink</Default>
         <Desc>SSID indicates the name of the network in AP role. SSID is a string up to 32 bytes</Desc>
         <Offset>27</Offset>
      </Param>
      <Param type="u" size="1" valtype="Security">
         <Name>SecurityType</Name>
         <Default>Open</Default>
         <Desc>WiFi Security Type in AP role. Single selection between Open, WEP and WPA</Desc>
         <Offset>25</Offset>
      </Param>
      <Param type="iu" size="1" valtype="WepKeyFormat" cond="SecurityType==WEP">
         <Name>WEPKeyFormat</Name>
         <Default>ASCII</Default>
         <Desc>WEP key format in AP role. Either Hexadecimal or ASCII</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="st" size="65" cond="(SecurityType==WEP || SecurityType==WPA)" script="if (SecurityType==WEP) {if (WEPKeyFormat==ASCII) {assertExactLengths(5, 13, Password);} else {assertConvertWepHex2Ascii(Password)}} else if (SecurityType==WPA) {assertLenRange(8, 63, Password);}">
         <Name>Password</Name>
         <Default></Default>
         <Desc>WiFi password in AP role. For WEP, it is either 5 bytes or 13 bytes, Hexadecimal or ASCII format. For WPA, it is 8-63 bytes</Desc>
         <Offset>60</Offset>
      </Param>
      <Param type="u" size="2" script="assertIsNumeric(BeaconInterval)">
         <Name>BeaconInterval</Name>
         <Default>100</Default>
         <Desc>Beacon Interval is the interval between AP beacons notifications. It is represented in TUs where each TU (Time Unit) is 1024 uSec</Desc>
         <Offset>20</Offset>
      </Param>
      <Param type="u" size="1" script="assertIsNumeric(DTIMInterval)">
         <Name>DTIMInterval</Name>
         <Default>2</Default>
         <Desc>DTIM Interval is the interval between beacons containing broadcast information. It is represented in Beacon Intervals</Desc>
         <Offset>24</Offset>
      </Param>
      <Param type="st" size="34" script="assertEqualOrLessLen(33, DeviceURNName)">
         <Name>DeviceURNName</Name>
         <Default>mysimplelink</Default>
         <Desc>In Peer2Peer Device role, represents the device name. In AP role, part of the default SSID. It is a string up to 33 bytes</Desc>
         <Offset>20</Offset>
      </Param>
      <Param type="st" size="25" script="assertEqualOrLessLen(24, DeviceDomainName)">
         <Name>DeviceDomainName</Name>
         <Default>mysimplelink.net</Default>
         <Desc>Denotes the domain name of the device. Can be used to connect to the device. It is a string up to 24 bytes</Desc>
         <Offset>54</Offset>
      </Param>
      <Param type="u" size="2" hidden="true" valtype="State">
         <Name>mDNSClient1Status</Name>
         <Default>Disable</Default>
         <Desc>1st mDNS service status</Desc>
         <Offset>20</Offset>
      </Param>
      <Param type="sn" size="100" script="assertEqualOrLessLen(100, mDNSClient1ServiceName)">
         <Name>mDNSClient1ServiceName</Name>
         <Default></Default>
         <Desc>1st mDNS service name. Service name is a string up to 100 bytes</Desc>
         <Offset>292</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" script="mDNSClient1ServiceName.length">
         <Name>mDNSClient1ServiceNameLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>1st mDNS service name size. Number up to 100 bytes</Desc>
         <Offset>22</Offset>
      </Param>
      <Param type="sn" size="256" script="assertEqualOrLessLen(255, mDNSClient1TextRecord)">
         <Name>mDNSClient1TextRecord</Name>
         <Default></Default>
         <Desc>1st mDNS service text record. Service text record is a string up to 255 bytes</Desc>
         <Offset>36</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" script="mDNSClient1TextRecord.length">
         <Name>mDNSClient1TextRecordLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>1st mDNS service text record size. Number up to 255 bytes</Desc>
         <Offset>23</Offset>
      </Param>
      <Param type="u" size="2" script="assertIsNumeric(mDNSClient1Port)">
         <Name>mDNSClient1Port</Name>
         <Default></Default>
         <Desc>1st mDNS service port</Desc>
         <Offset>24</Offset>
      </Param>
      <Param type="u" size="4" script="assertIsNumeric(mDNSClient1TTL)">
         <Name>mDNSClient1TTL</Name>
         <Default></Default>
         <Desc>1st mDNS service TTL in seconds</Desc>
         <Offset>28</Offset>
      </Param>
      <Param type="u" size="2" hidden="true" valtype="State">
         <Name>mDNSClient2Status</Name>
         <Default>Disable</Default>
         <Desc>2nd mDNS service status</Desc>
         <Offset>392</Offset>
      </Param>
      <Param type="sn" size="100" script="assertEqualOrLessLen(100, mDNSClient2ServiceName)">
         <Name>mDNSClient2ServiceName</Name>
         <Default></Default>
         <Desc>2nd mDNS service name. Service name is a string up to 100 bytes</Desc>
         <Offset>664</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" script="mDNSClient2ServiceName.length">
         <Name>mDNSClient2ServiceNameLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>2nd mDNS service name size. Number up to 100 bytes</Desc>
         <Offset>394</Offset>
      </Param>
      <Param type="sn" size="256" script="assertEqualOrLessLen(255, mDNSClient2TextRecord)">
         <Name>mDNSClient2TextRecord</Name>
         <Default></Default>
         <Desc>2nd mDNS service text record. Service text record is a string up to 255 bytes</Desc>
         <Offset>408</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" script="mDNSClient2TextRecord.length">
         <Name>mDNSClient2TextRecordLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>2nd mDNS service text record size. Number up to 255 bytes</Desc>
         <Offset>395</Offset>
      </Param>
      <Param type="u" size="2" script="assertIsNumeric(mDNSClient2Port)">
         <Name>mDNSClient2Port</Name>
         <Default></Default>
         <Desc>2nd mDNS service port</Desc>
         <Offset>396</Offset>
      </Param>
      <Param type="u" size="4" script="assertIsNumeric(mDNSClient2TTL)">
         <Name>mDNSClient2TTL</Name>
         <Default></Default>
         <Desc>2nd mDNS service TTL in seconds</Desc>
         <Offset>400</Offset>
      </Param>
      <Param type="u" size="2" hidden="true" valtype="State">
         <Name>mDNSClient3Status</Name>
         <Default>Disable</Default>
         <Desc>3rd mDNS service status</Desc>
         <Offset>764</Offset>
      </Param>
      <Param type="sn" size="100" script="assertEqualOrLessLen(100, mDNSClient3ServiceName)">
         <Name>mDNSClient3ServiceName</Name>
         <Default></Default>
         <Desc>3rd mDNS service name. Service name is a string up to 100 bytes</Desc>
         <Offset>1036</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" script="mDNSClient3ServiceName.length">
         <Name>mDNSClient3ServiceNameLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>3rd mDNS service name size. Number up to 100 bytes</Desc>
         <Offset>766</Offset>
      </Param>
      <Param type="sn" size="256" script="assertEqualOrLessLen(255, mDNSClient3TextRecord)">
         <Name>mDNSClient3TextRecord</Name>
         <Default></Default>
         <Desc>3rd mDNS service text record. Service text record is a string up to 255 bytes</Desc>
         <Offset>780</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" script="mDNSClient3TextRecord.length">
         <Name>mDNSClient3TextRecordLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>3rd mDNS service text record size. Number up to 255 bytes</Desc>
         <Offset>767</Offset>
      </Param>
      <Param type="u" size="2" script="assertIsNumeric(mDNSClient3Port)">
         <Name>mDNSClient3Port</Name>
         <Default></Default>
         <Desc>3rd mDNS service port</Desc>
         <Offset>768</Offset>
      </Param>
      <Param type="u" size="4" script="assertIsNumeric(mDNSClient3TTL)">
         <Name>mDNSClient3TTL</Name>
         <Default></Default>
         <Desc>3rd mDNS service TTL in seconds</Desc>
         <Offset>772</Offset>
      </Param>
      <Param type="u" size="2" hidden="true" valtype="State">
         <Name>mDNSClient4Status</Name>
         <Default>Disable</Default>
         <Desc>4th mDNS service status</Desc>
         <Offset>1136</Offset>
      </Param>
      <Param type="sn" size="100" script="assertEqualOrLessLen(100, mDNSClient4ServiceName)">
         <Name>mDNSClient4ServiceName</Name>
         <Default></Default>
         <Desc>4th mDNS service name. Service name is a string up to 100 bytes</Desc>
         <Offset>1408</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" script="mDNSClient4ServiceName.length">
         <Name>mDNSClient4ServiceNameLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>4th mDNS service name size. Number up to 100 bytes</Desc>
         <Offset>1138</Offset>
      </Param>
      <Param type="sn" size="256" script="assertEqualOrLessLen(255, mDNSClient4TextRecord)">
         <Name>mDNSClient4TextRecord</Name>
         <Default></Default>
         <Desc>4th mDNS service text record. Service text record is a string up to 255 bytes</Desc>
         <Offset>1152</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" script="mDNSClient4TextRecord.length">
         <Name>mDNSClient4TextRecordLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>4th mDNS service text record size. Number up to 255 bytes</Desc>
         <Offset>1139</Offset>
      </Param>
      <Param type="u" size="2" script="assertIsNumeric(mDNSClient4Port)">
         <Name>mDNSClient4Port</Name>
         <Default></Default>
         <Desc>4th mDNS service port</Desc>
         <Offset>1140</Offset>
      </Param>
      <Param type="u" size="4" script="assertIsNumeric(mDNSClient4TTL)">
         <Name>mDNSClient4TTL</Name>
         <Default></Default>
         <Desc>4th mDNS service TTL in seconds</Desc>
         <Offset>1144</Offset>
      </Param>
      <Param type="u" size="2" hidden="true" valtype="State">
         <Name>mDNSClient5Status</Name>
         <Default>Disable</Default>
         <Desc>5th mDNS service status</Desc>
         <Offset>1508</Offset>
      </Param>
      <Param type="sn" size="100" script="assertEqualOrLessLen(100, mDNSClient5ServiceName)">
         <Name>mDNSClient5ServiceName</Name>
         <Default></Default>
         <Desc>5th mDNS service name. Service name is a string up to 100 bytes</Desc>
         <Offset>1780</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" script="mDNSClient5ServiceName.length">
         <Name>mDNSClient5ServiceNameLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>5th mDNS service name size. Number up to 100 bytes</Desc>
         <Offset>1510</Offset>
      </Param>
      <Param type="sn" size="256" script="assertEqualOrLessLen(255, mDNSClient5TextRecord)">
         <Name>mDNSClient5TextRecord</Name>
         <Default></Default>
         <Desc>5th mDNS service text record. Service text record is a string up to 255 bytes</Desc>
         <Offset>1524</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" script="mDNSClient5TextRecord.length">
         <Name>mDNSClient5TextRecordLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>5th mDNS service text record size. Number up to 255 bytes</Desc>
         <Offset>1511</Offset>
      </Param>
      <Param type="u" size="2" script="assertIsNumeric(mDNSClient5Port)">
         <Name>mDNSClient5Port</Name>
         <Default></Default>
         <Desc>5th mDNS service port</Desc>
         <Offset>1512</Offset>
      </Param>
      <Param type="u" size="4" script="assertIsNumeric(mDNSClient5TTL)">
         <Name>mDNSClient5TTL</Name>
         <Default></Default>
         <Desc>5th mDNS service TTL in seconds</Desc>
         <Offset>1516</Offset>
      </Param>
      <Param type="u" size="4" script="assertIsNumeric(DhcpServerLeaseTime)">
         <Name>DHCPServerLeaseTime</Name>
         <Default>86400</Default>
         <Desc>DHCP Lease time in seconds</Desc>
         <Offset>20</Offset>
      </Param>
      <Param type="xl" size="4" valtype="IP" script="assertValidateIPaddress(DhcpServerIPStart)">
         <Name>DHCPServerIPStart</Name>
         <Default>192.168.1.2</Default>
         <Desc>Start IP Address provided by the DHCP server. E.g. 192.168.1.2</Desc>
         <Offset>24</Offset>
      </Param>
      <Param type="xl" size="4" valtype="IP" script="assertValidateIPaddress(DhcpServerIPEnd)">
         <Name>DHCPServerIPEnd</Name>
         <Default>192.168.1.254</Default>
         <Desc>End IP Address provided by the DHCP server. E.g. 192.168.1.254</Desc>
         <Offset>28</Offset>
      </Param>
      <Param type="u" size="2" script="assertIsNumeric(HTTPServerPort)">
         <Name>HTTPServerPort</Name>
         <Default>80</Default>
         <Desc>HTTP server TCP port</Desc>
         <Offset>20</Offset>
      </Param>
      <Param type="u" size="1" valtype="State">
         <Name>HTTPServerAccessRomPages</Name>
         <Default>Enable</Default>
         <Desc>Setting this option allows the HTTP server an access to HTML pages placed in ROM</Desc>
         <Offset>86</Offset>
      </Param>
      <Param type="u" size="1" valtype="State">
         <Name>HTTPServerAuth</Name>
         <Default>Disable</Default>
         <Desc>HTTP server authentication</Desc>
         <Offset>22</Offset>
      </Param>
      <Param type="st" size="21" cond="HTTPServerAuth==Enable" script="assertEqualOrLessLen(20, HTTPServerUser)">
         <Name>HTTPServerUser</Name>
         <Default>admin</Default>
         <Desc>HTTP server authenticated username. User is a string up to 20 bytes</Desc>
         <Offset>23</Offset>
      </Param>
      <Param type="st" size="21" cond="HTTPServerAuth==Enable" script="assertEqualOrLessLen(20, HTTPServerPass)">
         <Name>HTTPServerPass</Name>
         <Default>admin</Default>
         <Desc>HTTP server authenticated password. Password is a string up to 20 bytes</Desc>
         <Offset>44</Offset>
      </Param>
      <Param type="st" size="21" cond="HTTPServerAuth==Enable" script="assertEqualOrLessLen(20, HTTPServerRealm)">
         <Name>HTTPServerRealm</Name>
         <Default>Simple Link CC31xx</Default>
         <Desc>HTTP server authenticated Realm. Realm is a string up to 20 bytes</Desc>
         <Offset>65</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" valtype="Bool">
         <Name>Profile1Disabled</Name>
         <Default>True</Default>
         <Desc>Profile1 status</Desc>
         <Offset>480</Offset>
      </Param>
      <Param type="u" size="4" script="assertDecimalLenRange(0, 255, Profile1Priority)">
         <Name>Profile1Priority</Name>
         <Default></Default>
         <Desc>Profile1 priority [0-255]</Desc>
         <Offset>12</Offset>
      </Param>
      <Param type="sn" size="32" script="assertEqualOrLessLen(32, Profile1SSID)">
         <Name>Profile1SSID</Name>
         <Default></Default>
         <Desc>Profile1 peer SSID in station role or remote device in Peer2Peer role. String up to 32 bytes</Desc>
         <Offset>16</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" script="Profile1SSID.length">
         <Name>Profile1SSIDLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>Profile1 peer SSID length in station role or remote device length in Peer2Peer role. Number up to 32 bytes</Desc>
         <Offset>64</Offset>
      </Param>
      <Param type="u" size="4" valtype="State">
         <Name>Profile1BSSIDSet</Name>
         <Default></Default>
         <Desc>Profile1 peer BSSID mechanism. Setting this option make use of BSSID (and SSID) during WiFi connection while in station role. In Peer2Peer role, it denotes the peer MAC address</Desc>
         <Offset>76</Offset>
      </Param>
      <Param type="xb" size="6" cond="Profile1BSSIDSet==Enable" script="assertValidateMACaddress(Profile1BSSID)">
         <Name>Profile1BSSID</Name>
         <Default></Default>
         <Desc>Profile1 peer BSSID in station role or Peer2Peer remote device MAC address. 6 bytes MAC address written in HEX format, e.g. 12:34:56:78:90:ab</Desc>
         <Offset>68</Offset>
      </Param>
      <Param type="iu" size="1" valtype="ProfileSecurity">
         <Name>Profile1SecurityType</Name>
         <Default></Default>
         <Desc>Profile1 security type. Single selection between Open, WEP, WPA, Peer2Peer and Enterprise</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="1" valtype="P2pSecurity" cond="Profile1SecurityType==Peer2Peer">
         <Name>Profile1P2pSecurity</Name>
         <Default></Default>
         <Desc>Profile1 Peer2Peer security type. Single selection between P2P_NONE, P2P_PBC, P2P_PIN_KEYPAD and P2P_PIN_DISPLAY</Desc>
         <Offset>52</Offset>
      </Param>
      <Param type="sn" size="8" cond="(Profile1P2pSecurity==P2P_PIN_KEYPAD || Profile1P2pSecurity==P2P_PIN_DISPLAY) &amp;&amp; Profile1SecurityType==Peer2Peer" script="assertExactLen(8,Profile1P2pPin)">
         <Name>Profile1P2pPin</Name>
         <Default></Default>
         <Desc>Profile1 Peer2Peer PIN code. Should be 8 bytes long</Desc>
         <Offset>53</Offset>
      </Param>
      <Param type="iu" size="1" valtype="WepKeyFormat" cond="Profile1SecurityType==WEP">
         <Name>Profile1WepKeyFormat</Name>
         <Default>ASCII</Default>
         <Desc>Profile1 WEP key format. Either Hexadecimal or ASCII</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="sn" size="16" cond="Profile1SecurityType==WEP" script="if (Profile1WepKeyFormat==ASCII) {assertExactLengths(5, 13, Profile1WepKey);} else {assertConvertWepHex2Ascii(Profile1WepKey)}">
         <Name>Profile1WepKey</Name>
         <Default></Default>
         <Desc>Profile1 WEP key. Either 5 bytes or 13 bytes key, Hexadecimal or ASCII format</Desc>
         <Offset>372</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile1SecurityType==WEP" script="Profile1WepKey.length">
         <Name>Profile1WepKeyLen</Name>
         <Default></Default>
         <Desc>Profile1 WEP key length. Either 5 bytes or 13 bytes, Hexadecimal or ASCII format</Desc>
         <Offset>436</Offset>
      </Param>
      <Param type="iu" size="63" cond="Profile1SecurityType==WPA" script="assertLenRange(8, 63, Profile1WpaKey)">
         <Name>Profile1WpaKey</Name>
         <Default></Default>
         <Desc>Profile1 WPA passphrase. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" hidden="true" cond="Profile1SecurityType==WPA" script="Profile1WpaKey.length">
         <Name>Profile1WpaKeyLen</Name>
         <Default></Default>
         <Desc>Profile1 WPA passphrase length. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="xb" size="32" hidden="true" cond="Profile1SecurityType==WPA &amp;&amp; Profile1SSIDLen > 0  &amp;&amp; Profile1WpaKeyLen > 0" script="CfgParamEvalUtils.PMKGeneration(Profile1SSID,Profile1WpaKey)">
         <Name>Profile1PMK</Name>
         <Default></Default>
         <Desc>Profile1 WPA PMK. Always 32 bytes long</Desc>
         <Offset>80</Offset>
      </Param>
      <Param type="u" size="4" valtype="EapType" cond="Profile1SecurityType==Enterprise">
         <Name>Profile1EAPType</Name>
         <Default></Default>
         <Desc>Profile1 EAP type. Single selection between TLS, TTLS, PEAP and FAST</Desc>
         <Offset>268</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile1SecurityType==Enterprise" script="assertEqualOrLessLen(32, Profile1UserIdentity)">
         <Name>Profile1UserIdentity</Name>
         <Default></Default>
         <Desc>Profile1 user identity. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile1SecurityType==Enterprise" script="Profile1UserIdentity.length">
         <Name>Profile1UserIdentityLen</Name>
         <Default></Default>
         <Desc>Profile1 user identity length. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>152</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile1SecurityType==Enterprise &amp;&amp; Profile1EAPType!=TLS" script="assertEqualOrLessLen(32, Profile1AnonymousIdentity)">
         <Name>Profile1AnonymousIdentity</Name>
         <Default></Default>
         <Desc>Profile1 anonymous identity. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile1SecurityType==Enterprise &amp;&amp; Profile1EAPType!=TLS" script="Profile1AnonymousIdentity.length">
         <Name>Profile1AnonymousIdentityLen</Name>
         <Default></Default>
         <Desc>Profile1 anonymous identity length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>160</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile1SecurityType==Enterprise &amp;&amp; ((Profile1EAPType==FAST) || (Profile1EAPType==PEAP &amp;&amp; (Profile1EAPSubType==PSK || Profile1EAPSubType==MSCHAPv2)) || (Profile1EAPType==TTLS &amp;&amp; (Profile1EAPSubType==PSK || Profile1EAPSubType==MSCHAPv2)))" script="assertEqualOrLessLen(32, Profile1UserPassword)">
         <Name>Profile1UserPassword</Name>
         <Default></Default>
         <Desc>Profile1 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile1SecurityType==Enterprise &amp;&amp; ((Profile1EAPType==FAST) || (Profile1EAPType==PEAP &amp;&amp; (Profile1EAPSubType==PSK || Profile1EAPSubType==MSCHAPv2)) || (Profile1EAPType==TTLS &amp;&amp; (Profile1EAPSubType==PSK || Profile1EAPSubType==MSCHAPv2)))" script="Profile1UserPassword.length">
         <Name>Profile1UserPasswordLen</Name>
         <Default></Default>
         <Desc>Profile1 user password length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>168</Offset>
      </Param>
      <Param type="sn" size="96" hidden="true" cond="Profile1SecurityType==Enterprise" script="assertEqualOrLessLen(96, Profile1UserIdentity + Profile1AnonymousIdentity + Profile1UserPassword)">
         <Name>Profile1EapCredentials</Name>
         <Default></Default>
         <Desc>Profile1 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>276</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EapSubType" cond="Profile1SecurityType==Enterprise &amp;&amp; (Profile1EAPType==PEAP || Profile1EAPType==TTLS)">
         <Name>Profile1EAPSubType</Name>
         <Default></Default>
         <Desc>Profile1 EAP sub type. Single selection between MSCHAPv2, TLS and PSK. Applies only if EAPType is either TTLS or PEAP</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="PEAPVersion" cond="Profile1SecurityType==Enterprise &amp;&amp; Profile1EAPType==PEAP">
         <Name>Profile1PEAPVersion</Name>
         <Default></Default>
         <Desc>Profile1 PEAP version. Single selection between Version0 and Version1</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EAPFastProvisioning" cond="Profile1SecurityType==Enterprise &amp;&amp; Profile1EAPType==FAST">
         <Name>Profile1EAPFastProvisioning</Name>
         <Default></Default>
         <Desc>Profile1 EAP Fast provosioning. Single selection between Unauthenticated and Authenticated</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile1SecurityType==Enterprise" script="Profile1EAPSubType | Profile1PEAPVersion | Profile1EAPFastProvisioning">
         <Name>Profile1EapMethod</Name>
         <Default></Default>
         <Desc>Profile1 EAP Method. This is a mask collection of EAPSubType, PEAPVersion and EAPFastProvisioning</Desc>
         <Offset>260</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile1SecurityType)" script="if (Profile1SecurityType==WPA) {1;} else {0;}">
         <Name>Profile1PmkSet</Name>
         <Default>0</Default>
         <Desc>Profile1 PMK set. 0x1 for WPA, 0x0 for others.</Desc>
         <Offset>112</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile1SecurityType)" script="if (Profile1SecurityType==Open || Profile1SecurityType==WEP || Profile1SecurityType==Peer2Peer) {0;} else if (Profile1SecurityType==WPA || Profile1SecurityType==Enterprise) {18;}">
         <Name>Profile1PairwiseCipher</Name>
         <Default>0</Default>
         <Desc>Profile1 Pairwise cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>120</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile1SecurityType)" script="if (Profile1SecurityType==Open || Profile1SecurityType==WEP || Profile1SecurityType==Peer2Peer) {0;} else if (Profile1SecurityType==WPA || Profile1SecurityType==Enterprise) {18;}">
         <Name>Profile1GroupCipher</Name>
         <Default>0</Default>
         <Desc>Profile1 Group cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>124</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile1SecurityType)" script="if (Profile1SecurityType==Open || Profile1SecurityType==WEP || Profile1SecurityType==Peer2Peer) {4;} else if (Profile1SecurityType==Enterprise) {1;} else if (Profile1SecurityType==WPA) {2;}">
         <Name>Profile1KeyManagement</Name>
         <Default>4</Default>
         <Desc>Profile1 Key management suite. Multiple selection between 8021X=0x1, PSK=0x2 and NONE=0x4</Desc>
         <Offset>128</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile1SecurityType)" script="if (Profile1SecurityType==Open || Profile1SecurityType==WEP || Profile1SecurityType==Peer2Peer) {0;} else if (Profile1SecurityType==WPA || Profile1SecurityType==Enterprise) {3;}">
         <Name>Profile1SecProto</Name>
         <Default>0</Default>
         <Desc>Profile1 Security Protocol suite. Multiple selection between WPA=0x1 and RSN=0x2</Desc>
         <Offset>132</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile1SecurityType)" script="if (Profile1SecurityType==WPA || Profile1SecurityType==Enterprise) {1;} else {0;}">
         <Name>Profile1AuthAlgo</Name>
         <Default>0</Default>
         <Desc>Profile1 authentication algo. 0x1 for WPA and Enterprise, 0x0 for others.</Desc>
         <Offset>136</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile1SecurityType)" script="if (Profile1SecurityType==Peer2Peer) {0;} else {1;}">
         <Name>Profile1ScanSSID</Name>
         <Default>0</Default>
         <Desc>Profile1 scan SSID with Probe Requests. 0x0 for Peer2Peer, 0x1 for others.</Desc>
         <Offset>140</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile1SecurityType)" script="if (Profile1SecurityType==Enterprise) {3;} else {0;}">
         <Name>Profile1EapFlags</Name>
         <Default>3</Default>
         <Desc>Profile1 EAPOL flags. 0x3 for Enterprise, 0x0 for others.</Desc>
         <Offset>144</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile1SecurityType)" script="if (Profile1SecurityType==Enterprise) {1398;} else {0;}">
         <Name>Profile1EapFragmentSize</Name>
         <Default>1398</Default>
         <Desc>Profile1 EAP fragment size. 1398 for Enterprise, 0 for others.</Desc>
         <Offset>256</Offset>
      </Param>
      <Param type="d" size="4" hidden="true" cond="!(!Profile1SecurityType)" script="if (Profile1SecurityType==Enterprise) {-1;} else {0;}">
         <Name>Profile1EapWA</Name>
         <Default>-1</Default>
         <Desc>Profile1 EAP workaround. -1 for Enterprise, 0 for others.</Desc>
         <Offset>472</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile1SecurityType)" script="if (Profile1SecurityType==WPA) {1;} else {0;}">
         <Name>Profile1WpaHandshake</Name>
         <Default>1</Default>
         <Desc>Profile1 WPA peer key handshake. 1 for WPA, 0 for others.</Desc>
         <Offset>484</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile1SecurityType) &amp;&amp; ( !(!Profile1EAPType) || !(!Profile1EAPSubType) )" script="if (Profile1SecurityType==Enterprise &amp;&amp; (Profile1EAPType==TLS || Profile1EAPSubType==TLS_subtype)) {1;} else {0;}">
         <Name>Profile1EapClientCert</Name>
         <Default>1</Default>
         <Desc>Profile1 client certificate ID. 1 for TLS based, 0 for others.</Desc>
         <Offset>273</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile1SecurityType) &amp;&amp; ( !(!Profile1EAPType) || !(!Profile1EAPSubType) )" script="if (Profile1SecurityType==Enterprise &amp;&amp; (Profile1EAPType==TLS || Profile1EAPSubType==TLS_subtype)) {2;} else {0;}">
         <Name>Profile1EapPrivateKey</Name>
         <Default>1</Default>
         <Desc>Profile1 client private key ID. 2 for TLS based, 0 for others.</Desc>
         <Offset>274</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile1SecurityType) &amp;&amp; !(!Profile1EAPType)" script="if (Profile1SecurityType==Enterprise &amp;&amp; Profile1EAPType==FAST) {3;} else {0;}">
         <Name>Profile1EapFastPac</Name>
         <Default>3</Default>
         <Desc>Profile1 client PAC for Fast. 3 for FAST, 0 for others.</Desc>
         <Offset>275</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" valtype="Bool">
         <Name>Profile2Disabled</Name>
         <Default>True</Default>
         <Desc>Profile2 status</Desc>
         <Offset>1008</Offset>
      </Param>
      <Param type="u" size="4" script="assertDecimalLenRange(0, 255, Profile2Priority)">
         <Name>Profile2Priority</Name>
         <Default></Default>
         <Desc>Profile2 priority [0-255]</Desc>
         <Offset>540</Offset>
      </Param>
      <Param type="sn" size="32" script="assertEqualOrLessLen(32, Profile2SSID)">
         <Name>Profile2SSID</Name>
         <Default></Default>
         <Desc>Profile2 peer SSID in station role or remote device in Peer2Peer role. String up to 32 bytes</Desc>
         <Offset>544</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" script="Profile2SSID.length">
         <Name>Profile2SSIDLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>Profile2 peer SSID length in station role or remote device length in Peer2Peer role. Number up to 32 bytes</Desc>
         <Offset>592</Offset>
      </Param>
      <Param type="u" size="4" valtype="State">
         <Name>Profile2BSSIDSet</Name>
         <Default></Default>
         <Desc>Profile2 peer BSSID. Setting this option make use of BSSID (and SSID) during WiFi connection while in station role. In Peer2Peer role, it denotes the peer MAC address</Desc>
         <Offset>604</Offset>
      </Param>
      <Param type="xb" size="6" cond="Profile2BSSIDSet==Enable" script="assertValidateMACaddress(Profile2BSSID)">
         <Name>Profile2BSSID</Name>
         <Default></Default>
         <Desc>Profile2 BSSID or Peer2Peer remote device MAC address. 6 bytes MAC address written in HEX format, e.g. 12:34:56:78:90:ab</Desc>
         <Offset>596</Offset>
      </Param>
      <Param type="iu" size="1" valtype="ProfileSecurity">
         <Name>Profile2SecurityType</Name>
         <Default></Default>
         <Desc>Profile2 security type. Single selection between Open, WEP, WPA, Peer2Peer and Enterprise</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="1" valtype="P2pSecurity" cond="Profile2SecurityType==Peer2Peer">
         <Name>Profile2P2pSecurity</Name>
         <Default></Default>
         <Desc>Profile2 Peer2Peer security type. Single selection between P2P_NONE, P2P_PBC, P2P_PIN_KEYPAD and P2P_PIN_DISPLAY</Desc>
         <Offset>580</Offset>
      </Param>
      <Param type="sn" size="8" cond="(Profile2P2pSecurity==P2P_PIN_KEYPAD || Profile2P2pSecurity==P2P_PIN_DISPLAY) &amp;&amp; Profile2SecurityType==Peer2Peer" script="assertExactLen(8,Profile2P2pPin)">
         <Name>Profile2P2pPin</Name>
         <Default></Default>
         <Desc>Profile2 Peer2Peer PIN code. Should be 8 bytes long</Desc>
         <Offset>581</Offset>
      </Param>
      <Param type="iu" size="1" valtype="WepKeyFormat" cond="Profile2SecurityType==WEP">
         <Name>Profile2WepKeyFormat</Name>
         <Default>ASCII</Default>
         <Desc>Profile2 WEP key format. Either Hexadecimal or ASCII</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="sn" size="16" cond="Profile2SecurityType==WEP" script="if (Profile2WepKeyFormat==ASCII) {assertExactLengths(5, 13, Profile2WepKey);} else {assertConvertWepHex2Ascii(Profile2WepKey)}">
         <Name>Profile2WepKey</Name>
         <Default></Default>
         <Desc>Profile2 WEP key. Either 5 bytes or 13 bytes key, Hexadecimal or ASCII format</Desc>
         <Offset>900</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile2SecurityType==WEP" script="Profile2WepKey.length">
         <Name>Profile2WepKeyLen</Name>
         <Default></Default>
         <Desc>Profile2 WEP key length. Either 5 bytes or 13 bytes, Hexadecimal or ASCII format</Desc>
         <Offset>964</Offset>
      </Param>
      <Param type="iu" size="63" cond="Profile2SecurityType==WPA" script="assertLenRange(8, 63, Profile2WpaKey)">
         <Name>Profile2WpaKey</Name>
         <Default></Default>
         <Desc>Profile2 WPA passphrase. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" hidden="true" cond="Profile2SecurityType==WPA" script="Profile2WpaKey.length">
         <Name>Profile2WpaKeyLen</Name>
         <Default></Default>
         <Desc>Profile2 WPA passphrase length. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="xb" size="32" hidden="true" cond="Profile2SecurityType==WPA &amp;&amp; Profile2SSIDLen > 0  &amp;&amp; Profile2WpaKeyLen > 0" script="CfgParamEvalUtils.PMKGeneration(Profile2SSID,Profile2WpaKey)">
         <Name>Profile2PMK</Name>
         <Default></Default>
         <Desc>Profile2 WPA PMK. Always 32 bytes long</Desc>
         <Offset>608</Offset>
      </Param>
      <Param type="u" size="4" valtype="EapType" cond="Profile2SecurityType==Enterprise">
         <Name>Profile2EAPType</Name>
         <Default></Default>
         <Desc>Profile2 EAP type. Single selection between TLS, TTLS, PEAP and FAST</Desc>
         <Offset>796</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile2SecurityType==Enterprise" script="assertEqualOrLessLen(32, Profile2UserIdentity)">
         <Name>Profile2UserIdentity</Name>
         <Default></Default>
         <Desc>Profile2 user identity. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile2SecurityType==Enterprise" script="Profile2UserIdentity.length">
         <Name>Profile2UserIdentityLen</Name>
         <Default></Default>
         <Desc>Profile2 user identity length. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>680</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile2SecurityType==Enterprise &amp;&amp; Profile2EAPType!=TLS" script="assertEqualOrLessLen(32, Profile2AnonymousIdentity)">
         <Name>Profile2AnonymousIdentity</Name>
         <Default></Default>
         <Desc>Profile2 anonymous identity. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile2SecurityType==Enterprise &amp;&amp; Profile2EAPType!=TLS" script="Profile2AnonymousIdentity.length">
         <Name>Profile2AnonymousIdentityLen</Name>
         <Default></Default>
         <Desc>Profile2 anonymous identity length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>688</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile2SecurityType==Enterprise &amp;&amp; ((Profile2EAPType==FAST) || (Profile2EAPType==PEAP &amp;&amp; (Profile2EAPSubType==PSK || Profile2EAPSubType==MSCHAPv2)) || (Profile2EAPType==TTLS &amp;&amp; (Profile2EAPSubType==PSK || Profile2EAPSubType==MSCHAPv2)))" script="assertEqualOrLessLen(32, Profile2UserPassword)">
         <Name>Profile2UserPassword</Name>
         <Default></Default>
         <Desc>Profile2 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile2SecurityType==Enterprise &amp;&amp; ((Profile2EAPType==FAST) || (Profile2EAPType==PEAP &amp;&amp; (Profile2EAPSubType==PSK || Profile2EAPSubType==MSCHAPv2)) || (Profile2EAPType==TTLS &amp;&amp; (Profile2EAPSubType==PSK || Profile2EAPSubType==MSCHAPv2)))" script="Profile2UserPassword.length">
         <Name>Profile2UserPasswordLen</Name>
         <Default></Default>
         <Desc>Profile2 user password length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>696</Offset>
      </Param>
      <Param type="sn" size="96" hidden="true" cond="Profile2SecurityType==Enterprise" script="assertEqualOrLessLen(96, Profile2UserIdentity + Profile2AnonymousIdentity + Profile2UserPassword)">
         <Name>Profile2EapCredentials</Name>
         <Default></Default>
         <Desc>Profile2 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>804</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EapSubType" cond="Profile2SecurityType==Enterprise &amp;&amp; (Profile2EAPType==PEAP || Profile2EAPType==TTLS)">
         <Name>Profile2EAPSubType</Name>
         <Default></Default>
         <Desc>Profile2 EAP sub type. Single selection between MSCHAPv2, TLS and PSK. Applies only if EAPType is either TTLS or PEAP</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="PEAPVersion" cond="Profile2SecurityType==Enterprise &amp;&amp; Profile2EAPType==PEAP">
         <Name>Profile2PEAPVersion</Name>
         <Default></Default>
         <Desc>Profile2 PEAP version. Single selection between Version0 and Version1</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EAPFastProvisioning" cond="Profile2SecurityType==Enterprise &amp;&amp; Profile2EAPType==FAST">
         <Name>Profile2EAPFastProvisioning</Name>
         <Default></Default>
         <Desc>Profile2 EAP Fast provosioning. Single selection between Unauthenticated and Authenticated</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile2SecurityType==Enterprise" script="Profile2EAPSubType | Profile2PEAPVersion | Profile2EAPFastProvisioning">
         <Name>Profile2EapMethod</Name>
         <Default></Default>
         <Desc>Profile2 EAP Method. This is a mask collection of EAPSubType, PEAPVersion and EAPFastProvisioning</Desc>
         <Offset>788</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile2SecurityType)" script="if (Profile2SecurityType==WPA) {1;} else {0;}">
         <Name>Profile2PmkSet</Name>
         <Default>0</Default>
         <Desc>Profile2 PMK set. 0x1 for WPA, 0x0 for others.</Desc>
         <Offset>640</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile2SecurityType)" script="if (Profile2SecurityType==Open || Profile2SecurityType==WEP || Profile2SecurityType==Peer2Peer) {0;} else if (Profile2SecurityType==WPA || Profile2SecurityType==Enterprise) {18;}">
         <Name>Profile2PairwiseCipher</Name>
         <Default>0</Default>
         <Desc>Profile2 Pairwise cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>648</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile2SecurityType)" script="if (Profile2SecurityType==Open || Profile2SecurityType==WEP || Profile2SecurityType==Peer2Peer) {0;} else if (Profile2SecurityType==WPA || Profile2SecurityType==Enterprise) {18;}">
         <Name>Profile2GroupCipher</Name>
         <Default>0</Default>
         <Desc>Profile2 Group cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>652</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile2SecurityType)" script="if (Profile2SecurityType==Open || Profile2SecurityType==WEP || Profile2SecurityType==Peer2Peer) {4;} else if (Profile2SecurityType==Enterprise) {1;} else if (Profile2SecurityType==WPA) {2;}">
         <Name>Profile2KeyManagement</Name>
         <Default>4</Default>
         <Desc>Profile2 Key management suite. Multiple selection between 8021X=0x1, PSK=0x2 and NONE=0x4</Desc>
         <Offset>656</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile2SecurityType)" script="if (Profile2SecurityType==Open || Profile2SecurityType==WEP || Profile2SecurityType==Peer2Peer) {0;} else if (Profile2SecurityType==WPA || Profile2SecurityType==Enterprise) {3;}">
         <Name>Profile2SecProto</Name>
         <Default>0</Default>
         <Desc>Profile2 Security Protocol suite. Multiple selection between WPA=0x1 and RSN=0x2</Desc>
         <Offset>660</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile2SecurityType)" script="if (Profile2SecurityType==WPA || Profile2SecurityType==Enterprise) {1;} else {0;}">
         <Name>Profile2AuthAlgo</Name>
         <Default>0</Default>
         <Desc>Profile2 authentication algo. 0x1 for WPA and Enterprise, 0x0 for others.</Desc>
         <Offset>664</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile2SecurityType)" script="if (Profile2SecurityType==Peer2Peer) {0;} else {1;}">
         <Name>Profile2ScanSSID</Name>
         <Default>0</Default>
         <Desc>Profile2 scan SSID with Probe Requests. 0x0 for Peer2Peer, 0x1 for others.</Desc>
         <Offset>668</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile2SecurityType)" script="if (Profile2SecurityType==Enterprise) {3;} else {0;}">
         <Name>Profile2EapFlags</Name>
         <Default>3</Default>
         <Desc>Profile2 EAPOL flags. 0x3 for Enterprise, 0x0 for others.</Desc>
         <Offset>672</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile2SecurityType)" script="if (Profile2SecurityType==Enterprise) {1398;} else {0;}">
         <Name>Profile2EapFragmentSize</Name>
         <Default>1398</Default>
         <Desc>Profile2 EAP fragment size. 1398 for Enterprise, 0 for others.</Desc>
         <Offset>784</Offset>
      </Param>
      <Param type="d" size="4" hidden="true" cond="!(!Profile2SecurityType)" script="if (Profile2SecurityType==Enterprise) {-1;} else {0;}">
         <Name>Profile2EapWA</Name>
         <Default>-1</Default>
         <Desc>Profile2 EAP workaround. -1 for Enterprise, 0 for others.</Desc>
         <Offset>1000</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile2SecurityType)" script="if (Profile2SecurityType==WPA) {1;} else {0;}">
         <Name>Profile2WpaHandshake</Name>
         <Default>1</Default>
         <Desc>Profile2 WPA peer key handshake. 1 for WPA, 0 for others.</Desc>
         <Offset>1012</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile2SecurityType) &amp;&amp; ( !(!Profile2EAPType) || !(!Profile2EAPSubType) )" script="if (Profile2SecurityType==Enterprise &amp;&amp; (Profile2EAPType==TLS || Profile2EAPSubType==TLS_subtype)) {1;} else {0;}">
         <Name>Profile2EapClientCert</Name>
         <Default>1</Default>
         <Desc>Profile2 client certificate ID. 1 for TLS based, 0 for others.</Desc>
         <Offset>801</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile2SecurityType) &amp;&amp; ( !(!Profile2EAPType) || !(!Profile2EAPSubType) )" script="if (Profile2SecurityType==Enterprise &amp;&amp; (Profile2EAPType==TLS || Profile2EAPSubType==TLS_subtype)) {2;} else {0;}">
         <Name>Profile2EapPrivateKey</Name>
         <Default>1</Default>
         <Desc>Profile2 client private key ID. 2 for TLS based, 0 for others.</Desc>
         <Offset>802</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile2SecurityType) &amp;&amp; !(!Profile2EAPType)" script="if (Profile2SecurityType==Enterprise &amp;&amp; Profile2EAPType==FAST) {3;} else {0;}">
         <Name>Profile2EapFastPac</Name>
         <Default>3</Default>
         <Desc>Profile2 client PAC for Fast. 3 for FAST, 0 for others.</Desc>
         <Offset>803</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" valtype="Bool">
         <Name>Profile3Disabled</Name>
         <Default>True</Default>
         <Desc>Profile3 status</Desc>
         <Offset>1536</Offset>
      </Param>
      <Param type="u" size="4" script="assertDecimalLenRange(0, 255, Profile3Priority)">
         <Name>Profile3Priority</Name>
         <Default></Default>
         <Desc>Profile3 priority [0-255]</Desc>
         <Offset>1068</Offset>
      </Param>
      <Param type="sn" size="32" script="assertEqualOrLessLen(32, Profile3SSID)">
         <Name>Profile3SSID</Name>
         <Default></Default>
         <Desc>Profile3 peer SSID in station role or remote device in Peer2Peer role. String up to 32 bytes</Desc>
         <Offset>1072</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" script="Profile3SSID.length">
         <Name>Profile3SSIDLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>Profile3 peer SSID length in station role or remote device length in Peer2Peer role. Number up to 32 bytes</Desc>
         <Offset>1120</Offset>
      </Param>
      <Param type="u" size="4" valtype="State">
         <Name>Profile3BSSIDSet</Name>
         <Default></Default>
         <Desc>Profile3 peer BSSID. Setting this option make use of BSSID (and SSID) during WiFi connection while in station role. In Peer2Peer role, it denotes the peer MAC address</Desc>
         <Offset>1132</Offset>
      </Param>
      <Param type="xb" size="6" cond="Profile3BSSIDSet==Enable" script="assertValidateMACaddress(Profile3BSSID)">
         <Name>Profile3BSSID</Name>
         <Default></Default>
         <Desc>Profile3 BSSID or Peer2Peer remote device MAC address. 6 bytes MAC address written in HEX format, e.g. 12:34:56:78:90:ab</Desc>
         <Offset>1124</Offset>
      </Param>
      <Param type="iu" size="1" valtype="ProfileSecurity">
         <Name>Profile3SecurityType</Name>
         <Default></Default>
         <Desc>Profile3 security type. Single selection between Open, WEP, WPA, Peer2Peer and Enterprise</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="1" valtype="P2pSecurity" cond="Profile3SecurityType==Peer2Peer">
         <Name>Profile3P2pSecurity</Name>
         <Default></Default>
         <Desc>Profile3 Peer2Peer security type. Single selection between P2P_NONE, P2P_PBC, P2P_PIN_KEYPAD and P2P_PIN_DISPLAY</Desc>
         <Offset>1108</Offset>
      </Param>
      <Param type="sn" size="8" cond="(Profile3P2pSecurity==P2P_PIN_KEYPAD || Profile3P2pSecurity==P2P_PIN_DISPLAY) &amp;&amp; Profile3SecurityType==Peer2Peer" script="assertExactLen(8,Profile3P2pPin)">
         <Name>Profile3P2pPin</Name>
         <Default></Default>
         <Desc>Profile3 Peer2Peer PIN code. Should be 8 bytes long</Desc>
         <Offset>1109</Offset>
      </Param>
      <Param type="iu" size="1" valtype="WepKeyFormat" cond="Profile3SecurityType==WEP">
         <Name>Profile3WepKeyFormat</Name>
         <Default>ASCII</Default>
         <Desc>Profile3 WEP key format. Either Hexadecimal or ASCII</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="sn" size="16" cond="Profile3SecurityType==WEP" script="if (Profile3WepKeyFormat==ASCII) {assertExactLengths(5, 13, Profile3WepKey);} else {assertConvertWepHex2Ascii(Profile3WepKey)}">
         <Name>Profile3WepKey</Name>
         <Default></Default>
         <Desc>Profile3 WEP key. Either 5 bytes or 13 bytes key, Hexadecimal or ASCII format</Desc>
         <Offset>1428</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile3SecurityType==WEP" script="Profile3WepKey.length">
         <Name>Profile3WepKeyLen</Name>
         <Default></Default>
         <Desc>Profile3 WEP key length. Either 5 bytes or 13 bytes, Hexadecimal or ASCII format</Desc>
         <Offset>1492</Offset>
      </Param>
      <Param type="iu" size="63" cond="Profile3SecurityType==WPA" script="assertLenRange(8, 63, Profile3WpaKey)">
         <Name>Profile3WpaKey</Name>
         <Default></Default>
         <Desc>Profile3 WPA passphrase. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" hidden="true" cond="Profile3SecurityType==WPA" script="Profile3WpaKey.length">
         <Name>Profile3WpaKeyLen</Name>
         <Default></Default>
         <Desc>Profile3 WPA passphrase length. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="xb" size="32" hidden="true" cond="Profile3SecurityType==WPA &amp;&amp; Profile3SSIDLen > 0  &amp;&amp; Profile3WpaKeyLen > 0" script="CfgParamEvalUtils.PMKGeneration(Profile3SSID,Profile3WpaKey)">
         <Name>Profile3PMK</Name>
         <Default></Default>
         <Desc>Profile3 WPA PMK. Always 32 bytes long</Desc>
         <Offset>1136</Offset>
      </Param>
      <Param type="u" size="4" valtype="EapType" cond="Profile3SecurityType==Enterprise">
         <Name>Profile3EAPType</Name>
         <Default></Default>
         <Desc>Profile3 EAP type. Single selection between TLS, TTLS, PEAP and FAST</Desc>
         <Offset>1324</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile3SecurityType==Enterprise" script="assertEqualOrLessLen(32, Profile3UserIdentity)">
         <Name>Profile3UserIdentity</Name>
         <Default></Default>
         <Desc>Profile3 user identity. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile3SecurityType==Enterprise" script="Profile3UserIdentity.length">
         <Name>Profile3UserIdentityLen</Name>
         <Default></Default>
         <Desc>Profile3 user identity length. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>1208</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile3SecurityType==Enterprise &amp;&amp; Profile3EAPType!=TLS" script="assertEqualOrLessLen(32, Profile3AnonymousIdentity)">
         <Name>Profile3AnonymousIdentity</Name>
         <Default></Default>
         <Desc>Profile3 anonymous identity. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile3SecurityType==Enterprise &amp;&amp; Profile3EAPType!=TLS" script="Profile3AnonymousIdentity.length">
         <Name>Profile3AnonymousIdentityLen</Name>
         <Default></Default>
         <Desc>Profile3 anonymous identity length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>1216</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile3SecurityType==Enterprise &amp;&amp; ((Profile3EAPType==FAST) || (Profile3EAPType==PEAP &amp;&amp; (Profile3EAPSubType==PSK || Profile3EAPSubType==MSCHAPv2)) || (Profile3EAPType==TTLS &amp;&amp; (Profile3EAPSubType==PSK || Profile3EAPSubType==MSCHAPv2)))" script="assertEqualOrLessLen(32, Profile3UserPassword)">
         <Name>Profile3UserPassword</Name>
         <Default></Default>
         <Desc>Profile3 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile3SecurityType==Enterprise &amp;&amp; ((Profile3EAPType==FAST) || (Profile3EAPType==PEAP &amp;&amp; (Profile3EAPSubType==PSK || Profile3EAPSubType==MSCHAPv2)) || (Profile3EAPType==TTLS &amp;&amp; (Profile3EAPSubType==PSK || Profile3EAPSubType==MSCHAPv2)))" script="Profile3UserPassword.length">
         <Name>Profile3UserPasswordLen</Name>
         <Default></Default>
         <Desc>Profile3 user password length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>1224</Offset>
      </Param>
      <Param type="sn" size="96" hidden="true" cond="Profile3SecurityType==Enterprise" script="assertEqualOrLessLen(96, Profile3UserIdentity + Profile3AnonymousIdentity + Profile3UserPassword)">
         <Name>Profile3EapCredentials</Name>
         <Default></Default>
         <Desc>Profile3 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>1332</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EapSubType" cond="Profile3SecurityType==Enterprise &amp;&amp; (Profile3EAPType==PEAP || Profile3EAPType==TTLS)">
         <Name>Profile3EAPSubType</Name>
         <Default></Default>
         <Desc>Profile3 EAP sub type. Single selection between MSCHAPv2, TLS and PSK. Applies only if EAPType is either TTLS or PEAP</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="PEAPVersion" cond="Profile3SecurityType==Enterprise &amp;&amp; Profile3EAPType==PEAP">
         <Name>Profile3PEAPVersion</Name>
         <Default></Default>
         <Desc>Profile3 PEAP version. Single selection between Version0 and Version1</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EAPFastProvisioning" cond="Profile3SecurityType==Enterprise &amp;&amp; Profile3EAPType==FAST">
         <Name>Profile3EAPFastProvisioning</Name>
         <Default></Default>
         <Desc>Profile3 EAP Fast provosioning. Single selection between Unauthenticated and Authenticated</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile3SecurityType==Enterprise" script="Profile3EAPSubType | Profile3PEAPVersion | Profile3EAPFastProvisioning">
         <Name>Profile3EapMethod</Name>
         <Default></Default>
         <Desc>Profile3 EAP Method. This is a mask collection of EAPSubType, PEAPVersion and EAPFastProvisioning</Desc>
         <Offset>1316</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile3SecurityType)" script="if (Profile3SecurityType==WPA) {1;} else {0;}">
         <Name>Profile3PmkSet</Name>
         <Default>0</Default>
         <Desc>Profile3 PMK set. 0x1 for WPA, 0x0 for others.</Desc>
         <Offset>1168</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile3SecurityType)" script="if (Profile3SecurityType==Open || Profile3SecurityType==WEP || Profile3SecurityType==Peer2Peer) {0;} else if (Profile3SecurityType==WPA || Profile3SecurityType==Enterprise) {18;}">
         <Name>Profile3PairwiseCipher</Name>
         <Default>0</Default>
         <Desc>Profile3 Pairwise cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>1176</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile3SecurityType)" script="if (Profile3SecurityType==Open || Profile3SecurityType==WEP || Profile3SecurityType==Peer2Peer) {0;} else if (Profile3SecurityType==WPA || Profile3SecurityType==Enterprise) {18;}">
         <Name>Profile3GroupCipher</Name>
         <Default>0</Default>
         <Desc>Profile3 Group cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>1180</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile3SecurityType)" script="if (Profile3SecurityType==Open || Profile3SecurityType==WEP || Profile3SecurityType==Peer2Peer) {4;} else if (Profile3SecurityType==Enterprise) {1;} else if (Profile3SecurityType==WPA) {2;}">
         <Name>Profile3KeyManagement</Name>
         <Default>4</Default>
         <Desc>Profile3 Key management suite. Multiple selection between 8021X=0x1, PSK=0x2 and NONE=0x4</Desc>
         <Offset>1184</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile3SecurityType)" script="if (Profile3SecurityType==Open || Profile3SecurityType==WEP || Profile3SecurityType==Peer2Peer) {0;} else if (Profile3SecurityType==WPA || Profile3SecurityType==Enterprise) {3;}">
         <Name>Profile3SecProto</Name>
         <Default>0</Default>
         <Desc>Profile3 Security Protocol suite. Multiple selection between WPA=0x1 and RSN=0x2</Desc>
         <Offset>1188</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile3SecurityType)" script="if (Profile3SecurityType==WPA || Profile3SecurityType==Enterprise) {1;} else {0;}">
         <Name>Profile3AuthAlgo</Name>
         <Default>0</Default>
         <Desc>Profile3 authentication algo. 0x1 for WPA and Enterprise, 0x0 for others.</Desc>
         <Offset>1192</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile3SecurityType)" script="if (Profile3SecurityType==Peer2Peer) {0;} else {1;}">
         <Name>Profile3ScanSSID</Name>
         <Default>0</Default>
         <Desc>Profile3 scan SSID with Probe Requests. 0x0 for Peer2Peer, 0x1 for others.</Desc>
         <Offset>1196</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile3SecurityType)" script="if (Profile3SecurityType==Enterprise) {3;} else {0;}">
         <Name>Profile3EapFlags</Name>
         <Default>3</Default>
         <Desc>Profile3 EAPOL flags. 0x3 for Enterprise, 0x0 for others.</Desc>
         <Offset>1200</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile3SecurityType)" script="if (Profile3SecurityType==Enterprise) {1398;} else {0;}">
         <Name>Profile3EapFragmentSize</Name>
         <Default>1398</Default>
         <Desc>Profile3 EAP fragment size. 1398 for Enterprise, 0 for others.</Desc>
         <Offset>1312</Offset>
      </Param>
      <Param type="d" size="4" hidden="true" cond="!(!Profile3SecurityType)" script="if (Profile3SecurityType==Enterprise) {-1;} else {0;}">
         <Name>Profile3EapWA</Name>
         <Default>-1</Default>
         <Desc>Profile3 EAP workaround. -1 for Enterprise, 0 for others.</Desc>
         <Offset>1528</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile3SecurityType)" script="if (Profile3SecurityType==WPA) {1;} else {0;}">
         <Name>Profile3WpaHandshake</Name>
         <Default>1</Default>
         <Desc>Profile3 WPA peer key handshake. 1 for WPA, 0 for others.</Desc>
         <Offset>1540</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile3SecurityType) &amp;&amp; ( !(!Profile3EAPType) || !(!Profile3EAPSubType) )" script="if (Profile3SecurityType==Enterprise &amp;&amp; (Profile3EAPType==TLS || Profile3EAPSubType==TLS_subtype)) {1;} else {0;}">
         <Name>Profile3EapClientCert</Name>
         <Default>1</Default>
         <Desc>Profile3 client certificate ID. 1 for TLS based, 0 for others.</Desc>
         <Offset>1329</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile3SecurityType) &amp;&amp; ( !(!Profile3EAPType) || !(!Profile3EAPSubType) )" script="if (Profile3SecurityType==Enterprise &amp;&amp; (Profile3EAPType==TLS || Profile3EAPSubType==TLS_subtype)) {2;} else {0;}">
         <Name>Profile3EapPrivateKey</Name>
         <Default>1</Default>
         <Desc>Profile3 client private key ID. 2 for TLS based, 0 for others.</Desc>
         <Offset>1330</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile3SecurityType) &amp;&amp; !(!Profile3EAPType)" script="if (Profile3SecurityType==Enterprise &amp;&amp; Profile3EAPType==FAST) {3;} else {0;}">
         <Name>Profile3EapFastPac</Name>
         <Default>3</Default>
         <Desc>Profile3 client PAC for Fast. 3 for FAST, 0 for others.</Desc>
         <Offset>1331</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" valtype="Bool">
         <Name>Profile4Disabled</Name>
         <Default>True</Default>
         <Desc>Profile4 status</Desc>
         <Offset>2064</Offset>
      </Param>
      <Param type="u" size="4" script="assertDecimalLenRange(0, 255, Profile4Priority)">
         <Name>Profile4Priority</Name>
         <Default></Default>
         <Desc>Profile4 priority [0-255]</Desc>
         <Offset>1596</Offset>
      </Param>
      <Param type="sn" size="32" script="assertEqualOrLessLen(32, Profile4SSID)">
         <Name>Profile4SSID</Name>
         <Default></Default>
         <Desc>Profile4 peer SSID in station role or remote device in Peer2Peer role. String up to 32 bytes</Desc>
         <Offset>1600</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" script="Profile4SSID.length">
         <Name>Profile4SSIDLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>Profile4 peer SSID length in station role or remote device length in Peer2Peer role. Number up to 32 bytes</Desc>
         <Offset>1648</Offset>
      </Param>
      <Param type="u" size="4" valtype="State">
         <Name>Profile4BSSIDSet</Name>
         <Default></Default>
         <Desc>Profile4 peer BSSID. Setting this option make use of BSSID (and SSID) during WiFi connection while in station role. In Peer2Peer role, it denotes the peer MAC address</Desc>
         <Offset>1660</Offset>
      </Param>
      <Param type="xb" size="6" cond="Profile4BSSIDSet==Enable" script="assertValidateMACaddress(Profile4BSSID)">
         <Name>Profile4BSSID</Name>
         <Default></Default>
         <Desc>Profile4 BSSID or Peer2Peer remote device MAC address. 6 bytes MAC address written in HEX format, e.g. 12:34:56:78:90:ab</Desc>
         <Offset>1652</Offset>
      </Param>
      <Param type="iu" size="1" valtype="ProfileSecurity">
         <Name>Profile4SecurityType</Name>
         <Default></Default>
         <Desc>Profile4 security type. Single selection between Open, WEP, WPA, Peer2Peer and Enterprise</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="1" valtype="P2pSecurity" cond="Profile4SecurityType==Peer2Peer">
         <Name>Profile4P2pSecurity</Name>
         <Default></Default>
         <Desc>Profile4 Peer2Peer security type. Single selection between P2P_NONE, P2P_PBC, P2P_PIN_KEYPAD and P2P_PIN_DISPLAY</Desc>
         <Offset>1636</Offset>
      </Param>
      <Param type="sn" size="8" cond="(Profile4P2pSecurity==P2P_PIN_KEYPAD || Profile4P2pSecurity==P2P_PIN_DISPLAY) &amp;&amp; Profile4SecurityType==Peer2Peer" script="assertExactLen(8,Profile4P2pPin)">
         <Name>Profile4P2pPin</Name>
         <Default></Default>
         <Desc>Profile4 Peer2Peer PIN code. Should be 8 bytes long</Desc>
         <Offset>1637</Offset>
      </Param>
      <Param type="iu" size="1" valtype="WepKeyFormat" cond="Profile4SecurityType==WEP">
         <Name>Profile4WepKeyFormat</Name>
         <Default>ASCII</Default>
         <Desc>Profile4 WEP key format. Either Hexadecimal or ASCII</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="sn" size="16" cond="Profile4SecurityType==WEP" script="if (Profile4WepKeyFormat==ASCII) {assertExactLengths(5, 13, Profile4WepKey);} else {assertConvertWepHex2Ascii(Profile4WepKey)}">
         <Name>Profile4WepKey</Name>
         <Default></Default>
         <Desc>Profile4 WEP key. Either 5 bytes or 13 bytes key, Hexadecimal or ASCII format</Desc>
         <Offset>1956</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile4SecurityType==WEP" script="Profile4WepKey.length">
         <Name>Profile4WepKeyLen</Name>
         <Default></Default>
         <Desc>Profile4 WEP key length. Either 5 bytes or 13 bytes, Hexadecimal or ASCII format</Desc>
         <Offset>2020</Offset>
      </Param>
      <Param type="iu" size="63" cond="Profile4SecurityType==WPA" script="assertLenRange(8, 63, Profile4WpaKey)">
         <Name>Profile4WpaKey</Name>
         <Default></Default>
         <Desc>Profile4 WPA passphrase. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" hidden="true" cond="Profile4SecurityType==WPA" script="Profile4WpaKey.length">
         <Name>Profile4WpaKeyLen</Name>
         <Default></Default>
         <Desc>Profile4 WPA passphrase length. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="xb" size="32" hidden="true" cond="Profile4SecurityType==WPA &amp;&amp; Profile4SSIDLen > 0  &amp;&amp; Profile4WpaKeyLen > 0" script="CfgParamEvalUtils.PMKGeneration(Profile4SSID,Profile4WpaKey)">
         <Name>Profile4PMK</Name>
         <Default></Default>
         <Desc>Profile4 WPA PMK. Always 32 bytes long</Desc>
         <Offset>1664</Offset>
      </Param>
      <Param type="u" size="4" valtype="EapType" cond="Profile4SecurityType==Enterprise">
         <Name>Profile4EAPType</Name>
         <Default></Default>
         <Desc>Profile4 EAP type. Single selection between TLS, TTLS, PEAP and FAST</Desc>
         <Offset>1852</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile4SecurityType==Enterprise" script="assertEqualOrLessLen(32, Profile4UserIdentity)">
         <Name>Profile4UserIdentity</Name>
         <Default></Default>
         <Desc>Profile4 user identity. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile4SecurityType==Enterprise" script="Profile4UserIdentity.length">
         <Name>Profile4UserIdentityLen</Name>
         <Default></Default>
         <Desc>Profile4 user identity length. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>1736</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile4SecurityType==Enterprise &amp;&amp; Profile4EAPType!=TLS" script="assertEqualOrLessLen(32, Profile4AnonymousIdentity)">
         <Name>Profile4AnonymousIdentity</Name>
         <Default></Default>
         <Desc>Profile4 anonymous identity. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile4SecurityType==Enterprise &amp;&amp; Profile4EAPType!=TLS" script="Profile4AnonymousIdentity.length">
         <Name>Profile4AnonymousIdentityLen</Name>
         <Default></Default>
         <Desc>Profile4 anonymous identity length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>1744</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile4SecurityType==Enterprise &amp;&amp; ((Profile4EAPType==FAST) || (Profile4EAPType==PEAP &amp;&amp; (Profile4EAPSubType==PSK || Profile4EAPSubType==MSCHAPv2)) || (Profile4EAPType==TTLS &amp;&amp; (Profile4EAPSubType==PSK || Profile4EAPSubType==MSCHAPv2)))" script="assertEqualOrLessLen(32, Profile4UserPassword)">
         <Name>Profile4UserPassword</Name>
         <Default></Default>
         <Desc>Profile4 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile4SecurityType==Enterprise &amp;&amp; ((Profile4EAPType==FAST) || (Profile4EAPType==PEAP &amp;&amp; (Profile4EAPSubType==PSK || Profile4EAPSubType==MSCHAPv2)) || (Profile4EAPType==TTLS &amp;&amp; (Profile4EAPSubType==PSK || Profile4EAPSubType==MSCHAPv2)))" script="Profile4UserPassword.length">
         <Name>Profile4UserPasswordLen</Name>
         <Default></Default>
         <Desc>Profile4 user password length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>1752</Offset>
      </Param>
      <Param type="sn" size="96" hidden="true" cond="Profile4SecurityType==Enterprise" script="assertEqualOrLessLen(96, Profile4UserIdentity + Profile4AnonymousIdentity + Profile4UserPassword)">
         <Name>Profile4EapCredentials</Name>
         <Default></Default>
         <Desc>Profile4 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>1860</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EapSubType" cond="Profile4SecurityType==Enterprise &amp;&amp; (Profile4EAPType==PEAP || Profile4EAPType==TTLS)">
         <Name>Profile4EAPSubType</Name>
         <Default></Default>
         <Desc>Profile4 EAP sub type. Single selection between MSCHAPv2, TLS and PSK. Applies only if EAPType is either TTLS or PEAP</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="PEAPVersion" cond="Profile4SecurityType==Enterprise &amp;&amp; Profile4EAPType==PEAP">
         <Name>Profile4PEAPVersion</Name>
         <Default></Default>
         <Desc>Profile4 PEAP version. Single selection between Version0 and Version1</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EAPFastProvisioning" cond="Profile4SecurityType==Enterprise &amp;&amp; Profile4EAPType==FAST">
         <Name>Profile4EAPFastProvisioning</Name>
         <Default></Default>
         <Desc>Profile4 EAP Fast provosioning. Single selection between Unauthenticated and Authenticated</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile4SecurityType==Enterprise" script="Profile4EAPSubType | Profile4PEAPVersion | Profile4EAPFastProvisioning">
         <Name>Profile4EapMethod</Name>
         <Default></Default>
         <Desc>Profile4 EAP Method. This is a mask collection of EAPSubType, PEAPVersion and EAPFastProvisioning</Desc>
         <Offset>1844</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile4SecurityType)" script="if (Profile4SecurityType==WPA) {1;} else {0;}">
         <Name>Profile4PmkSet</Name>
         <Default>0</Default>
         <Desc>Profile4 PMK set. 0x1 for WPA, 0x0 for others.</Desc>
         <Offset>1696</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile4SecurityType)" script="if (Profile4SecurityType==Open || Profile4SecurityType==WEP || Profile4SecurityType==Peer2Peer) {0;} else if (Profile4SecurityType==WPA || Profile4SecurityType==Enterprise) {18;}">
         <Name>Profile4PairwiseCipher</Name>
         <Default>0</Default>
         <Desc>Profile4 Pairwise cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>1704</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile4SecurityType)" script="if (Profile4SecurityType==Open || Profile4SecurityType==WEP || Profile4SecurityType==Peer2Peer) {0;} else if (Profile4SecurityType==WPA || Profile4SecurityType==Enterprise) {18;}">
         <Name>Profile4GroupCipher</Name>
         <Default>0</Default>
         <Desc>Profile4 Group cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>1708</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile4SecurityType)" script="if (Profile4SecurityType==Open || Profile4SecurityType==WEP || Profile4SecurityType==Peer2Peer) {4;} else if (Profile4SecurityType==Enterprise) {1;} else if (Profile4SecurityType==WPA) {2;}">
         <Name>Profile4KeyManagement</Name>
         <Default>4</Default>
         <Desc>Profile4 Key management suite. Multiple selection between 8021X=0x1, PSK=0x2 and NONE=0x4</Desc>
         <Offset>1712</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile4SecurityType)" script="if (Profile4SecurityType==Open || Profile4SecurityType==WEP || Profile4SecurityType==Peer2Peer) {0;} else if (Profile4SecurityType==WPA || Profile4SecurityType==Enterprise) {3;}">
         <Name>Profile4SecProto</Name>
         <Default>0</Default>
         <Desc>Profile4 Security Protocol suite. Multiple selection between WPA=0x1 and RSN=0x2</Desc>
         <Offset>1716</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile4SecurityType)" script="if (Profile4SecurityType==WPA || Profile4SecurityType==Enterprise) {1;} else {0;}">
         <Name>Profile4AuthAlgo</Name>
         <Default>0</Default>
         <Desc>Profile4 authentication algo. 0x1 for WPA and Enterprise, 0x0 for others.</Desc>
         <Offset>1720</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile4SecurityType)" script="if (Profile4SecurityType==Peer2Peer) {0;} else {1;}">
         <Name>Profile4ScanSSID</Name>
         <Default>0</Default>
         <Desc>Profile4 scan SSID with Probe Requests. 0x0 for Peer2Peer, 0x1 for others.</Desc>
         <Offset>1724</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile4SecurityType)" script="if (Profile4SecurityType==Enterprise) {3;} else {0;}">
         <Name>Profile4EapFlags</Name>
         <Default>3</Default>
         <Desc>Profile4 EAPOL flags. 0x3 for Enterprise, 0x0 for others.</Desc>
         <Offset>1728</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile4SecurityType)" script="if (Profile4SecurityType==Enterprise) {1398;} else {0;}">
         <Name>Profile4EapFragmentSize</Name>
         <Default>1398</Default>
         <Desc>Profile4 EAP fragment size. 1398 for Enterprise, 0 for others.</Desc>
         <Offset>1840</Offset>
      </Param>
      <Param type="d" size="4" hidden="true" cond="!(!Profile4SecurityType)" script="if (Profile4SecurityType==Enterprise) {-1;} else {0;}">
         <Name>Profile4EapWA</Name>
         <Default>-1</Default>
         <Desc>Profile4 EAP workaround. -1 for Enterprise, 0 for others.</Desc>
         <Offset>2056</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile4SecurityType)" script="if (Profile4SecurityType==WPA) {1;} else {0;}">
         <Name>Profile4WpaHandshake</Name>
         <Default>1</Default>
         <Desc>Profile4 WPA peer key handshake. 1 for WPA, 0 for others.</Desc>
         <Offset>2068</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile4SecurityType) &amp;&amp; ( !(!Profile4EAPType) || !(!Profile4EAPSubType) )" script="if (Profile4SecurityType==Enterprise &amp;&amp; (Profile4EAPType==TLS || Profile4EAPSubType==TLS_subtype)) {1;} else {0;}">
         <Name>Profile4EapClientCert</Name>
         <Default>1</Default>
         <Desc>Profile4 client certificate ID. 1 for TLS based, 0 for others.</Desc>
         <Offset>1857</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile4SecurityType) &amp;&amp; ( !(!Profile4EAPType) || !(!Profile4EAPSubType) )" script="if (Profile4SecurityType==Enterprise &amp;&amp; (Profile4EAPType==TLS || Profile4EAPSubType==TLS_subtype)) {2;} else {0;}">
         <Name>Profile4EapPrivateKey</Name>
         <Default>1</Default>
         <Desc>Profile4 client private key ID. 2 for TLS based, 0 for others.</Desc>
         <Offset>1858</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile4SecurityType) &amp;&amp; !(!Profile4EAPType)" script="if (Profile4SecurityType==Enterprise &amp;&amp; Profile4EAPType==FAST) {3;} else {0;}">
         <Name>Profile4EapFastPac</Name>
         <Default>3</Default>
         <Desc>Profile4 client PAC for Fast. 3 for FAST, 0 for others.</Desc>
         <Offset>1859</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" valtype="Bool">
         <Name>Profile5Disabled</Name>
         <Default>True</Default>
         <Desc>Profile5 status</Desc>
         <Offset>2592</Offset>
      </Param>
      <Param type="u" size="4" script="assertDecimalLenRange(0, 255, Profile5Priority)">
         <Name>Profile5Priority</Name>
         <Default></Default>
         <Desc>Profile5 priority [0-255]</Desc>
         <Offset>2124</Offset>
      </Param>
      <Param type="sn" size="32" script="assertEqualOrLessLen(32, Profile5SSID)">
         <Name>Profile5SSID</Name>
         <Default></Default>
         <Desc>Profile5 peer SSID in station role or remote device in Peer2Peer role. String up to 32 bytes</Desc>
         <Offset>2128</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" script="Profile5SSID.length">
         <Name>Profile5SSIDLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>Profile5 peer SSID length in station role or remote device length in Peer2Peer role. Number up to 32 bytes</Desc>
         <Offset>2176</Offset>
      </Param>
      <Param type="u" size="4" valtype="State">
         <Name>Profile5BSSIDSet</Name>
         <Default></Default>
         <Desc>Profile5 peer BSSID. Setting this option make use of BSSID (and SSID) during WiFi connection while in station role. In Peer2Peer role, it denotes the peer MAC address</Desc>
         <Offset>2188</Offset>
      </Param>
      <Param type="xb" size="6" cond="Profile5BSSIDSet==Enable" script="assertValidateMACaddress(Profile5BSSID)">
         <Name>Profile5BSSID</Name>
         <Default></Default>
         <Desc>Profile5 BSSID or Peer2Peer remote device MAC address. 6 bytes MAC address written in HEX format, e.g. 12:34:56:78:90:ab</Desc>
         <Offset>2180</Offset>
      </Param>
      <Param type="iu" size="1" valtype="ProfileSecurity">
         <Name>Profile5SecurityType</Name>
         <Default></Default>
         <Desc>Profile5 security type. Single selection between Open, WEP, WPA, Peer2Peer and Enterprise</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="1" valtype="P2pSecurity" cond="Profile5SecurityType==Peer2Peer">
         <Name>Profile5P2pSecurity</Name>
         <Default></Default>
         <Desc>Profile5 Peer2Peer security type. Single selection between P2P_NONE, P2P_PBC, P2P_PIN_KEYPAD and P2P_PIN_DISPLAY</Desc>
         <Offset>2164</Offset>
      </Param>
      <Param type="sn" size="8" cond="(Profile5P2pSecurity==P2P_PIN_KEYPAD || Profile5P2pSecurity==P2P_PIN_DISPLAY) &amp;&amp; Profile5SecurityType==Peer2Peer" script="assertExactLen(8,Profile5P2pPin)">
         <Name>Profile5P2pPin</Name>
         <Default></Default>
         <Desc>Profile5 Peer2Peer PIN code. Should be 8 bytes long</Desc>
         <Offset>2165</Offset>
      </Param>
      <Param type="iu" size="1" valtype="WepKeyFormat" cond="Profile5SecurityType==WEP">
         <Name>Profile5WepKeyFormat</Name>
         <Default>ASCII</Default>
         <Desc>Profile5 WEP key format. Either Hexadecimal or ASCII</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="sn" size="16" cond="Profile5SecurityType==WEP" script="if (Profile5WepKeyFormat==ASCII) {assertExactLengths(5, 13, Profile5WepKey);} else {assertConvertWepHex2Ascii(Profile5WepKey)}">
         <Name>Profile5WepKey</Name>
         <Default></Default>
         <Desc>Profile5 WEP key. Either 5 bytes or 13 bytes key, Hexadecimal or ASCII format</Desc>
         <Offset>2484</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile5SecurityType==WEP" script="Profile5WepKey.length">
         <Name>Profile5WepKeyLen</Name>
         <Default></Default>
         <Desc>Profile5 WEP key length. Either 5 bytes or 13 bytes, Hexadecimal or ASCII format</Desc>
         <Offset>2548</Offset>
      </Param>
      <Param type="iu" size="63" cond="Profile5SecurityType==WPA" script="assertLenRange(8, 63, Profile5WpaKey)">
         <Name>Profile5WpaKey</Name>
         <Default></Default>
         <Desc>Profile5 WPA passphrase. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" hidden="true" cond="Profile5SecurityType==WPA" script="Profile5WpaKey.length">
         <Name>Profile5WpaKeyLen</Name>
         <Default></Default>
         <Desc>Profile5 WPA passphrase length. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="xb" size="32" hidden="true" cond="Profile5SecurityType==WPA &amp;&amp; Profile5SSIDLen > 0  &amp;&amp; Profile5WpaKeyLen > 0" script="CfgParamEvalUtils.PMKGeneration(Profile5SSID,Profile5WpaKey)">
         <Name>Profile5PMK</Name>
         <Default></Default>
         <Desc>Profile5 WPA PMK. Always 32 bytes long</Desc>
         <Offset>2192</Offset>
      </Param>
      <Param type="u" size="4" valtype="EapType" cond="Profile5SecurityType==Enterprise">
         <Name>Profile5EAPType</Name>
         <Default></Default>
         <Desc>Profile5 EAP type. Single selection between TLS, TTLS, PEAP and FAST</Desc>
         <Offset>2380</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile5SecurityType==Enterprise" script="assertEqualOrLessLen(32, Profile5UserIdentity)">
         <Name>Profile5UserIdentity</Name>
         <Default></Default>
         <Desc>Profile5 user identity. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile5SecurityType==Enterprise" script="Profile5UserIdentity.length">
         <Name>Profile5UserIdentityLen</Name>
         <Default></Default>
         <Desc>Profile5 user identity length. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>2264</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile5SecurityType==Enterprise &amp;&amp; Profile5EAPType!=TLS" script="assertEqualOrLessLen(32, Profile5AnonymousIdentity)">
         <Name>Profile5AnonymousIdentity</Name>
         <Default></Default>
         <Desc>Profile5 anonymous identity. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile5SecurityType==Enterprise &amp;&amp; Profile5EAPType!=TLS" script="Profile5AnonymousIdentity.length">
         <Name>Profile5AnonymousIdentityLen</Name>
         <Default></Default>
         <Desc>Profile5 anonymous identity length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>2272</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile5SecurityType==Enterprise &amp;&amp; ((Profile5EAPType==FAST) || (Profile5EAPType==PEAP &amp;&amp; (Profile5EAPSubType==PSK || Profile5EAPSubType==MSCHAPv2)) || (Profile5EAPType==TTLS &amp;&amp; (Profile5EAPSubType==PSK || Profile5EAPSubType==MSCHAPv2)))" script="assertEqualOrLessLen(32, Profile5UserPassword)">
         <Name>Profile5UserPassword</Name>
         <Default></Default>
         <Desc>Profile5 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile5SecurityType==Enterprise &amp;&amp; ((Profile5EAPType==FAST) || (Profile5EAPType==PEAP &amp;&amp; (Profile5EAPSubType==PSK || Profile5EAPSubType==MSCHAPv2)) || (Profile5EAPType==TTLS &amp;&amp; (Profile5EAPSubType==PSK || Profile5EAPSubType==MSCHAPv2)))" script="Profile5UserPassword.length">
         <Name>Profile5UserPasswordLen</Name>
         <Default></Default>
         <Desc>Profile5 user password length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>2280</Offset>
      </Param>
      <Param type="sn" size="96" hidden="true" cond="Profile5SecurityType==Enterprise" script="assertEqualOrLessLen(96, Profile5UserIdentity + Profile5AnonymousIdentity + Profile5UserPassword)">
         <Name>Profile5EapCredentials</Name>
         <Default></Default>
         <Desc>Profile5 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>2388</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EapSubType" cond="Profile5SecurityType==Enterprise &amp;&amp; (Profile5EAPType==PEAP || Profile5EAPType==TTLS)">
         <Name>Profile5EAPSubType</Name>
         <Default></Default>
         <Desc>Profile5 EAP sub type. Single selection between MSCHAPv2, TLS and PSK. Applies only if EAPType is either TTLS or PEAP</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="PEAPVersion" cond="Profile5SecurityType==Enterprise &amp;&amp; Profile5EAPType==PEAP">
         <Name>Profile5PEAPVersion</Name>
         <Default></Default>
         <Desc>Profile5 PEAP version. Single selection between Version0 and Version1</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EAPFastProvisioning" cond="Profile5SecurityType==Enterprise &amp;&amp; Profile5EAPType==FAST">
         <Name>Profile5EAPFastProvisioning</Name>
         <Default></Default>
         <Desc>Profile5 EAP Fast provosioning. Single selection between Unauthenticated and Authenticated</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile5SecurityType==Enterprise" script="Profile5EAPSubType | Profile5PEAPVersion | Profile5EAPFastProvisioning">
         <Name>Profile5EapMethod</Name>
         <Default></Default>
         <Desc>Profile5 EAP Method. This is a mask collection of EAPSubType, PEAPVersion and EAPFastProvisioning</Desc>
         <Offset>2372</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile5SecurityType)" script="if (Profile5SecurityType==WPA) {1;} else {0;}">
         <Name>Profile5PmkSet</Name>
         <Default>0</Default>
         <Desc>Profile5 PMK set. 0x1 for WPA, 0x0 for others.</Desc>
         <Offset>2224</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile5SecurityType)" script="if (Profile5SecurityType==Open || Profile5SecurityType==WEP || Profile5SecurityType==Peer2Peer) {0;} else if (Profile5SecurityType==WPA || Profile5SecurityType==Enterprise) {18;}">
         <Name>Profile5PairwiseCipher</Name>
         <Default>0</Default>
         <Desc>Profile5 Pairwise cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>2232</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile5SecurityType)" script="if (Profile5SecurityType==Open || Profile5SecurityType==WEP || Profile5SecurityType==Peer2Peer) {0;} else if (Profile5SecurityType==WPA || Profile5SecurityType==Enterprise) {18;}">
         <Name>Profile5GroupCipher</Name>
         <Default>0</Default>
         <Desc>Profile5 Group cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>2236</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile5SecurityType)" script="if (Profile5SecurityType==Open || Profile5SecurityType==WEP || Profile5SecurityType==Peer2Peer) {4;} else if (Profile5SecurityType==Enterprise) {1;} else if (Profile5SecurityType==WPA) {2;}">
         <Name>Profile5KeyManagement</Name>
         <Default>4</Default>
         <Desc>Profile5 Key management suite. Multiple selection between 8021X=0x1, PSK=0x2 and NONE=0x4</Desc>
         <Offset>2240</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile5SecurityType)" script="if (Profile5SecurityType==Open || Profile5SecurityType==WEP || Profile5SecurityType==Peer2Peer) {0;} else if (Profile5SecurityType==WPA || Profile5SecurityType==Enterprise) {3;}">
         <Name>Profile5SecProto</Name>
         <Default>0</Default>
         <Desc>Profile5 Security Protocol suite. Multiple selection between WPA=0x1 and RSN=0x2</Desc>
         <Offset>2244</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile5SecurityType)" script="if (Profile5SecurityType==WPA || Profile5SecurityType==Enterprise) {1;} else {0;}">
         <Name>Profile5AuthAlgo</Name>
         <Default>0</Default>
         <Desc>Profile5 authentication algo. 0x1 for WPA and Enterprise, 0x0 for others.</Desc>
         <Offset>2248</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile5SecurityType)" script="if (Profile5SecurityType==Peer2Peer) {0;} else {1;}">
         <Name>Profile5ScanSSID</Name>
         <Default>0</Default>
         <Desc>Profile5 scan SSID with Probe Requests. 0x0 for Peer2Peer, 0x1 for others.</Desc>
         <Offset>2252</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile5SecurityType)" script="if (Profile5SecurityType==Enterprise) {3;} else {0;}">
         <Name>Profile5EapFlags</Name>
         <Default>3</Default>
         <Desc>Profile5 EAPOL flags. 0x3 for Enterprise, 0x0 for others.</Desc>
         <Offset>2256</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile5SecurityType)" script="if (Profile5SecurityType==Enterprise) {1398;} else {0;}">
         <Name>Profile5EapFragmentSize</Name>
         <Default>1398</Default>
         <Desc>Profile5 EAP fragment size. 1398 for Enterprise, 0 for others.</Desc>
         <Offset>2368</Offset>
      </Param>
      <Param type="d" size="4" hidden="true" cond="!(!Profile5SecurityType)" script="if (Profile5SecurityType==Enterprise) {-1;} else {0;}">
         <Name>Profile5EapWA</Name>
         <Default>-1</Default>
         <Desc>Profile5 EAP workaround. -1 for Enterprise, 0 for others.</Desc>
         <Offset>2584</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile5SecurityType)" script="if (Profile5SecurityType==WPA) {1;} else {0;}">
         <Name>Profile5WpaHandshake</Name>
         <Default>1</Default>
         <Desc>Profile5 WPA peer key handshake. 1 for WPA, 0 for others.</Desc>
         <Offset>2596</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile5SecurityType) &amp;&amp; ( !(!Profile5EAPType) || !(!Profile5EAPSubType) )" script="if (Profile5SecurityType==Enterprise &amp;&amp; (Profile5EAPType==TLS || Profile5EAPSubType==TLS_subtype)) {1;} else {0;}">
         <Name>Profile5EapClientCert</Name>
         <Default>1</Default>
         <Desc>Profile5 client certificate ID. 1 for TLS based, 0 for others.</Desc>
         <Offset>2385</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile5SecurityType) &amp;&amp; ( !(!Profile5EAPType) || !(!Profile5EAPSubType) )" script="if (Profile5SecurityType==Enterprise &amp;&amp; (Profile5EAPType==TLS || Profile5EAPSubType==TLS_subtype)) {2;} else {0;}">
         <Name>Profile5EapPrivateKey</Name>
         <Default>1</Default>
         <Desc>Profile5 client private key ID. 2 for TLS based, 0 for others.</Desc>
         <Offset>2386</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile5SecurityType) &amp;&amp; !(!Profile5EAPType)" script="if (Profile5SecurityType==Enterprise &amp;&amp; Profile5EAPType==FAST) {3;} else {0;}">
         <Name>Profile5EapFastPac</Name>
         <Default>3</Default>
         <Desc>Profile5 client PAC for Fast. 3 for FAST, 0 for others.</Desc>
         <Offset>2387</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" valtype="Bool">
         <Name>Profile6Disabled</Name>
         <Default>True</Default>
         <Desc>Profile6 status</Desc>
         <Offset>3120</Offset>
      </Param>
      <Param type="u" size="4" script="assertDecimalLenRange(0, 255, Profile6Priority)">
         <Name>Profile6Priority</Name>
         <Default></Default>
         <Desc>Profile6 priority [0-255]</Desc>
         <Offset>2652</Offset>
      </Param>
      <Param type="sn" size="32" script="assertEqualOrLessLen(32, Profile6SSID)">
         <Name>Profile6SSID</Name>
         <Default></Default>
         <Desc>Profile6 peer SSID in station role or remote device in Peer2Peer role. String up to 32 bytes</Desc>
         <Offset>2656</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" script="Profile6SSID.length">
         <Name>Profile6SSIDLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>Profile6 peer SSID length in station role or remote device length in Peer2Peer role. Number up to 32 bytes</Desc>
         <Offset>2704</Offset>
      </Param>
      <Param type="u" size="4" valtype="State">
         <Name>Profile6BSSIDSet</Name>
         <Default></Default>
         <Desc>Profile6 peer BSSID. Setting this option make use of BSSID (and SSID) during WiFi connection while in station role. In Peer2Peer role, it denotes the peer MAC address</Desc>
         <Offset>2716</Offset>
      </Param>
      <Param type="xb" size="6" cond="Profile6BSSIDSet==Enable" script="assertValidateMACaddress(Profile6BSSID)">
         <Name>Profile6BSSID</Name>
         <Default></Default>
         <Desc>Profile6 BSSID or Peer2Peer remote device MAC address. 6 bytes MAC address written in HEX format, e.g. 12:34:56:78:90:ab</Desc>
         <Offset>2708</Offset>
      </Param>
      <Param type="iu" size="1" valtype="ProfileSecurity">
         <Name>Profile6SecurityType</Name>
         <Default></Default>
         <Desc>Profile6 security type. Single selection between Open, WEP, WPA, Peer2Peer and Enterprise</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="1" valtype="P2pSecurity" cond="Profile6SecurityType==Peer2Peer">
         <Name>Profile6P2pSecurity</Name>
         <Default></Default>
         <Desc>Profile6 Peer2Peer security type. Single selection between P2P_NONE, P2P_PBC, P2P_PIN_KEYPAD and P2P_PIN_DISPLAY</Desc>
         <Offset>2692</Offset>
      </Param>
      <Param type="sn" size="8" cond="(Profile6P2pSecurity==P2P_PIN_KEYPAD || Profile6P2pSecurity==P2P_PIN_DISPLAY) &amp;&amp; Profile6SecurityType==Peer2Peer" script="assertExactLen(8,Profile6P2pPin)">
         <Name>Profile6P2pPin</Name>
         <Default></Default>
         <Desc>Profile6 Peer2Peer PIN code. Should be 8 bytes long</Desc>
         <Offset>2693</Offset>
      </Param>
      <Param type="iu" size="1" valtype="WepKeyFormat" cond="Profile6SecurityType==WEP">
         <Name>Profile6WepKeyFormat</Name>
         <Default>ASCII</Default>
         <Desc>Profile6 WEP key format. Either Hexadecimal or ASCII</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="sn" size="16" cond="Profile6SecurityType==WEP" script="if (Profile6WepKeyFormat==ASCII) {assertExactLengths(5, 13, Profile6WepKey);} else {assertConvertWepHex2Ascii(Profile6WepKey)}">
         <Name>Profile6WepKey</Name>
         <Default></Default>
         <Desc>Profile6 WEP key. Either 5 bytes or 13 bytes key, Hexadecimal or ASCII format</Desc>
         <Offset>3012</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile6SecurityType==WEP" script="Profile6WepKey.length">
         <Name>Profile6WepKeyLen</Name>
         <Default></Default>
         <Desc>Profile6 WEP key length. Either 5 bytes or 13 bytes, Hexadecimal or ASCII format</Desc>
         <Offset>3076</Offset>
      </Param>
      <Param type="iu" size="63" cond="Profile6SecurityType==WPA" script="assertLenRange(8, 63, Profile6WpaKey)">
         <Name>Profile6WpaKey</Name>
         <Default></Default>
         <Desc>Profile6 WPA passphrase. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" hidden="true" cond="Profile6SecurityType==WPA" script="Profile6WpaKey.length">
         <Name>Profile6WpaKeyLen</Name>
         <Default></Default>
         <Desc>Profile6 WPA passphrase length. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="xb" size="32" hidden="true" cond="Profile6SecurityType==WPA &amp;&amp; Profile6SSIDLen > 0  &amp;&amp; Profile6WpaKeyLen > 0" script="CfgParamEvalUtils.PMKGeneration(Profile6SSID,Profile6WpaKey)">
         <Name>Profile6PMK</Name>
         <Default></Default>
         <Desc>Profile6 WPA PMK. Always 32 bytes long</Desc>
         <Offset>2720</Offset>
      </Param>
      <Param type="u" size="4" valtype="EapType" cond="Profile6SecurityType==Enterprise">
         <Name>Profile6EAPType</Name>
         <Default></Default>
         <Desc>Profile6 EAP type. Single selection between TLS, TTLS, PEAP and FAST</Desc>
         <Offset>2908</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile6SecurityType==Enterprise" script="assertEqualOrLessLen(32, Profile6UserIdentity)">
         <Name>Profile6UserIdentity</Name>
         <Default></Default>
         <Desc>Profile6 user identity. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile6SecurityType==Enterprise" script="Profile6UserIdentity.length">
         <Name>Profile6UserIdentityLen</Name>
         <Default></Default>
         <Desc>Profile6 user identity length. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>2792</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile6SecurityType==Enterprise &amp;&amp; Profile6EAPType!=TLS" script="assertEqualOrLessLen(32, Profile6AnonymousIdentity)">
         <Name>Profile6AnonymousIdentity</Name>
         <Default></Default>
         <Desc>Profile6 anonymous identity. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile6SecurityType==Enterprise &amp;&amp; Profile6EAPType!=TLS" script="Profile6AnonymousIdentity.length">
         <Name>Profile6AnonymousIdentityLen</Name>
         <Default></Default>
         <Desc>Profile6 anonymous identity length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>2800</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile6SecurityType==Enterprise &amp;&amp; ((Profile6EAPType==FAST) || (Profile6EAPType==PEAP &amp;&amp; (Profile6EAPSubType==PSK || Profile6EAPSubType==MSCHAPv2)) || (Profile6EAPType==TTLS &amp;&amp; (Profile6EAPSubType==PSK || Profile6EAPSubType==MSCHAPv2)))" script="assertEqualOrLessLen(32, Profile6UserPassword)">
         <Name>Profile6UserPassword</Name>
         <Default></Default>
         <Desc>Profile6 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile6SecurityType==Enterprise &amp;&amp; ((Profile6EAPType==FAST) || (Profile6EAPType==PEAP &amp;&amp; (Profile6EAPSubType==PSK || Profile6EAPSubType==MSCHAPv2)) || (Profile6EAPType==TTLS &amp;&amp; (Profile6EAPSubType==PSK || Profile6EAPSubType==MSCHAPv2)))" script="Profile6UserPassword.length">
         <Name>Profile6UserPasswordLen</Name>
         <Default></Default>
         <Desc>Profile6 user password length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>2808</Offset>
      </Param>
      <Param type="sn" size="96" hidden="true" cond="Profile6SecurityType==Enterprise" script="assertEqualOrLessLen(96, Profile6UserIdentity + Profile6AnonymousIdentity + Profile6UserPassword)">
         <Name>Profile6EapCredentials</Name>
         <Default></Default>
         <Desc>Profile6 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>2916</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EapSubType" cond="Profile6SecurityType==Enterprise &amp;&amp; (Profile6EAPType==PEAP || Profile6EAPType==TTLS)">
         <Name>Profile6EAPSubType</Name>
         <Default></Default>
         <Desc>Profile6 EAP sub type. Single selection between MSCHAPv2, TLS and PSK. Applies only if EAPType is either TTLS or PEAP</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="PEAPVersion" cond="Profile6SecurityType==Enterprise &amp;&amp; Profile6EAPType==PEAP">
         <Name>Profile6PEAPVersion</Name>
         <Default></Default>
         <Desc>Profile6 PEAP version. Single selection between Version0 and Version1</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EAPFastProvisioning" cond="Profile6SecurityType==Enterprise &amp;&amp; Profile6EAPType==FAST">
         <Name>Profile6EAPFastProvisioning</Name>
         <Default></Default>
         <Desc>Profile6 EAP Fast provosioning. Single selection between Unauthenticated and Authenticated</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile6SecurityType==Enterprise" script="Profile6EAPSubType | Profile6PEAPVersion | Profile6EAPFastProvisioning">
         <Name>Profile6EapMethod</Name>
         <Default></Default>
         <Desc>Profile6 EAP Method. This is a mask collection of EAPSubType, PEAPVersion and EAPFastProvisioning</Desc>
         <Offset>2900</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile6SecurityType)" script="if (Profile6SecurityType==WPA) {1;} else {0;}">
         <Name>Profile6PmkSet</Name>
         <Default>0</Default>
         <Desc>Profile6 PMK set. 0x1 for WPA, 0x0 for others.</Desc>
         <Offset>2752</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile6SecurityType)" script="if (Profile6SecurityType==Open || Profile6SecurityType==WEP || Profile6SecurityType==Peer2Peer) {0;} else if (Profile6SecurityType==WPA || Profile6SecurityType==Enterprise) {18;}">
         <Name>Profile6PairwiseCipher</Name>
         <Default>0</Default>
         <Desc>Profile6 Pairwise cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>2760</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile6SecurityType)" script="if (Profile6SecurityType==Open || Profile6SecurityType==WEP || Profile6SecurityType==Peer2Peer) {0;} else if (Profile6SecurityType==WPA || Profile6SecurityType==Enterprise) {18;}">
         <Name>Profile6GroupCipher</Name>
         <Default>0</Default>
         <Desc>Profile6 Group cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>2764</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile6SecurityType)" script="if (Profile6SecurityType==Open || Profile6SecurityType==WEP || Profile6SecurityType==Peer2Peer) {4;} else if (Profile6SecurityType==Enterprise) {1;} else if (Profile6SecurityType==WPA) {2;}">
         <Name>Profile6KeyManagement</Name>
         <Default>4</Default>
         <Desc>Profile6 Key management suite. Multiple selection between 8021X=0x1, PSK=0x2 and NONE=0x4</Desc>
         <Offset>2768</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile6SecurityType)" script="if (Profile6SecurityType==Open || Profile6SecurityType==WEP || Profile6SecurityType==Peer2Peer) {0;} else if (Profile6SecurityType==WPA || Profile6SecurityType==Enterprise) {3;}">
         <Name>Profile6SecProto</Name>
         <Default>0</Default>
         <Desc>Profile6 Security Protocol suite. Multiple selection between WPA=0x1 and RSN=0x2</Desc>
         <Offset>2772</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile6SecurityType)" script="if (Profile6SecurityType==WPA || Profile6SecurityType==Enterprise) {1;} else {0;}">
         <Name>Profile6AuthAlgo</Name>
         <Default>0</Default>
         <Desc>Profile6 authentication algo. 0x1 for WPA and Enterprise, 0x0 for others.</Desc>
         <Offset>2776</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile6SecurityType)" script="if (Profile6SecurityType==Peer2Peer) {0;} else {1;}">
         <Name>Profile6ScanSSID</Name>
         <Default>0</Default>
         <Desc>Profile6 scan SSID with Probe Requests. 0x0 for Peer2Peer, 0x1 for others.</Desc>
         <Offset>2780</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile6SecurityType)" script="if (Profile6SecurityType==Enterprise) {3;} else {0;}">
         <Name>Profile6EapFlags</Name>
         <Default>3</Default>
         <Desc>Profile6 EAPOL flags. 0x3 for Enterprise, 0x0 for others.</Desc>
         <Offset>2784</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile6SecurityType)" script="if (Profile6SecurityType==Enterprise) {1398;} else {0;}">
         <Name>Profile6EapFragmentSize</Name>
         <Default>1398</Default>
         <Desc>Profile6 EAP fragment size. 1398 for Enterprise, 0 for others.</Desc>
         <Offset>2896</Offset>
      </Param>
      <Param type="d" size="4" hidden="true" cond="!(!Profile6SecurityType)" script="if (Profile6SecurityType==Enterprise) {-1;} else {0;}">
         <Name>Profile6EapWA</Name>
         <Default>-1</Default>
         <Desc>Profile6 EAP workaround. -1 for Enterprise, 0 for others.</Desc>
         <Offset>3112</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile6SecurityType)" script="if (Profile6SecurityType==WPA) {1;} else {0;}">
         <Name>Profile6WpaHandshake</Name>
         <Default>1</Default>
         <Desc>Profile6 WPA peer key handshake. 1 for WPA, 0 for others.</Desc>
         <Offset>3124</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile6SecurityType) &amp;&amp; ( !(!Profile6EAPType) || !(!Profile6EAPSubType) )" script="if (Profile6SecurityType==Enterprise &amp;&amp; (Profile6EAPType==TLS || Profile6EAPSubType==TLS_subtype)) {1;} else {0;}">
         <Name>Profile6EapClientCert</Name>
         <Default>1</Default>
         <Desc>Profile6 client certificate ID. 1 for TLS based, 0 for others.</Desc>
         <Offset>2913</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile6SecurityType) &amp;&amp; ( !(!Profile6EAPType) || !(!Profile6EAPSubType) )" script="if (Profile6SecurityType==Enterprise &amp;&amp; (Profile6EAPType==TLS || Profile6EAPSubType==TLS_subtype)) {2;} else {0;}">
         <Name>Profile6EapPrivateKey</Name>
         <Default>1</Default>
         <Desc>Profile6 client private key ID. 2 for TLS based, 0 for others.</Desc>
         <Offset>2914</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile6SecurityType) &amp;&amp; !(!Profile6EAPType)" script="if (Profile6SecurityType==Enterprise &amp;&amp; Profile6EAPType==FAST) {3;} else {0;}">
         <Name>Profile6EapFastPac</Name>
         <Default>3</Default>
         <Desc>Profile6 client PAC for Fast. 3 for FAST, 0 for others.</Desc>
         <Offset>2915</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" valtype="Bool">
         <Name>Profile7Disabled</Name>
         <Default>True</Default>
         <Desc>Profile7 status</Desc>
         <Offset>3648</Offset>
      </Param>
      <Param type="u" size="4" script="assertDecimalLenRange(0, 255, Profile7Priority)">
         <Name>Profile7Priority</Name>
         <Default></Default>
         <Desc>Profile7 priority [0-255]</Desc>
         <Offset>3180</Offset>
      </Param>
      <Param type="sn" size="32" script="assertEqualOrLessLen(32, Profile7SSID)">
         <Name>Profile7SSID</Name>
         <Default></Default>
         <Desc>Profile7 peer SSID in station role or remote device in Peer2Peer role. String up to 32 bytes</Desc>
         <Offset>3184</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" script="Profile7SSID.length">
         <Name>Profile7SSIDLen</Name>
         <Default></Default>
         <Value>0</Value>
         <Desc>Profile7 peer SSID length in station role or remote device length in Peer2Peer role. Number up to 32 bytes</Desc>
         <Offset>3232</Offset>
      </Param>
      <Param type="u" size="4" valtype="State">
         <Name>Profile7BSSIDSet</Name>
         <Default></Default>
         <Desc>Profile7 peer BSSID. Setting this option make use of BSSID (and SSID) during WiFi connection while in station role. In Peer2Peer role, it denotes the peer MAC address</Desc>
         <Offset>3244</Offset>
      </Param>
      <Param type="xb" size="6" cond="Profile7BSSIDSet==Enable" script="assertValidateMACaddress(Profile7BSSID)">
         <Name>Profile7BSSID</Name>
         <Default></Default>
         <Desc>Profile7 BSSID or Peer2Peer remote device MAC address. 6 bytes MAC address written in HEX format, e.g. 12:34:56:78:90:ab</Desc>
         <Offset>3236</Offset>
      </Param>
      <Param type="iu" size="1" valtype="ProfileSecurity">
         <Name>Profile7SecurityType</Name>
         <Default></Default>
         <Desc>Profile7 security type. Single selection between Open, WEP, WPA, Peer2Peer and Enterprise</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="1" valtype="P2pSecurity" cond="Profile7SecurityType==Peer2Peer">
         <Name>Profile7P2pSecurity</Name>
         <Default></Default>
         <Desc>Profile7 Peer2Peer security type. Single selection between P2P_NONE, P2P_PBC, P2P_PIN_KEYPAD and P2P_PIN_DISPLAY</Desc>
         <Offset>3220</Offset>
      </Param>
      <Param type="sn" size="8" cond="(Profile7P2pSecurity==P2P_PIN_KEYPAD || Profile7P2pSecurity==P2P_PIN_DISPLAY) &amp;&amp; Profile7SecurityType==Peer2Peer" script="assertExactLen(8,Profile7P2pPin)">
         <Name>Profile7P2pPin</Name>
         <Default></Default>
         <Desc>Profile7 Peer2Peer PIN code. Should be 8 bytes long</Desc>
         <Offset>3221</Offset>
      </Param>
      <Param type="iu" size="1" valtype="WepKeyFormat" cond="Profile7SecurityType==WEP">
         <Name>Profile7WepKeyFormat</Name>
         <Default>ASCII</Default>
         <Desc>Profile7 WEP key format. Either Hexadecimal or ASCII</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="sn" size="16" cond="Profile7SecurityType==WEP" script="if (Profile7WepKeyFormat==ASCII) {assertExactLengths(5, 13, Profile7WepKey);} else {assertConvertWepHex2Ascii(Profile7WepKey)}">
         <Name>Profile7WepKey</Name>
         <Default></Default>
         <Desc>Profile7 WEP key. Either 5 bytes or 13 bytes key, Hexadecimal or ASCII format</Desc>
         <Offset>3540</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile7SecurityType==WEP" script="Profile7WepKey.length">
         <Name>Profile7WepKeyLen</Name>
         <Default></Default>
         <Desc>Profile7 WEP key length. Either 5 bytes or 13 bytes, Hexadecimal or ASCII format</Desc>
         <Offset>3604</Offset>
      </Param>
      <Param type="iu" size="63" cond="Profile7SecurityType==WPA" script="assertLenRange(8, 63, Profile7WpaKey)">
         <Name>Profile7WpaKey</Name>
         <Default></Default>
         <Desc>Profile7 WPA passphrase. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" hidden="true" cond="Profile7SecurityType==WPA" script="Profile7WpaKey.length">
         <Name>Profile7WpaKeyLen</Name>
         <Default></Default>
         <Desc>Profile7 WPA passphrase length. It is 8-63 bytes long</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="xb" size="32" hidden="true" cond="Profile7SecurityType==WPA &amp;&amp; Profile7SSIDLen > 0  &amp;&amp; Profile7WpaKeyLen > 0" script="CfgParamEvalUtils.PMKGeneration(Profile7SSID,Profile7WpaKey)">
         <Name>Profile7PMK</Name>
         <Default></Default>
         <Desc>Profile7 WPA PMK. Always 32 bytes long</Desc>
         <Offset>3248</Offset>
      </Param>
      <Param type="u" size="4" valtype="EapType" cond="Profile7SecurityType==Enterprise">
         <Name>Profile7EAPType</Name>
         <Default></Default>
         <Desc>Profile7 EAP type. Single selection between TLS, TTLS, PEAP and FAST</Desc>
         <Offset>3436</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile7SecurityType==Enterprise" script="assertEqualOrLessLen(32, Profile7UserIdentity)">
         <Name>Profile7UserIdentity</Name>
         <Default></Default>
         <Desc>Profile7 user identity. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile7SecurityType==Enterprise" script="Profile7UserIdentity.length">
         <Name>Profile7UserIdentityLen</Name>
         <Default></Default>
         <Desc>Profile7 user identity length. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>3320</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile7SecurityType==Enterprise &amp;&amp; Profile7EAPType!=TLS" script="assertEqualOrLessLen(32, Profile7AnonymousIdentity)">
         <Name>Profile7AnonymousIdentity</Name>
         <Default></Default>
         <Desc>Profile7 anonymous identity. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile7SecurityType==Enterprise &amp;&amp; Profile7EAPType!=TLS" script="Profile7AnonymousIdentity.length">
         <Name>Profile7AnonymousIdentityLen</Name>
         <Default></Default>
         <Desc>Profile7 anonymous identity length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>3328</Offset>
      </Param>
      <Param type="iu" size="32" cond="Profile7SecurityType==Enterprise &amp;&amp; ((Profile7EAPType==FAST) || (Profile7EAPType==PEAP &amp;&amp; (Profile7EAPSubType==PSK || Profile7EAPSubType==MSCHAPv2)) || (Profile7EAPType==TTLS &amp;&amp; (Profile7EAPSubType==PSK || Profile7EAPSubType==MSCHAPv2)))" script="assertEqualOrLessLen(32, Profile7UserPassword)">
         <Name>Profile7UserPassword</Name>
         <Default></Default>
         <Desc>Profile7 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile7SecurityType==Enterprise &amp;&amp; ((Profile7EAPType==FAST) || (Profile7EAPType==PEAP &amp;&amp; (Profile7EAPSubType==PSK || Profile7EAPSubType==MSCHAPv2)) || (Profile7EAPType==TTLS &amp;&amp; (Profile7EAPSubType==PSK || Profile7EAPSubType==MSCHAPv2)))" script="Profile7UserPassword.length">
         <Name>Profile7UserPasswordLen</Name>
         <Default></Default>
         <Desc>Profile7 user password length. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>3336</Offset>
      </Param>
      <Param type="sn" size="96" hidden="true" cond="Profile7SecurityType==Enterprise" script="assertEqualOrLessLen(96, Profile7UserIdentity + Profile7AnonymousIdentity + Profile7UserPassword)">
         <Name>Profile7EapCredentials</Name>
         <Default></Default>
         <Desc>Profile7 user password. Does not apply for TLS EAPType. User identity length + Anonymous identity length + User password length = bounds to 96 bytes</Desc>
         <Offset>3444</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EapSubType" cond="Profile7SecurityType==Enterprise &amp;&amp; (Profile7EAPType==PEAP || Profile7EAPType==TTLS)">
         <Name>Profile7EAPSubType</Name>
         <Default></Default>
         <Desc>Profile7 EAP sub type. Single selection between MSCHAPv2, TLS and PSK. Applies only if EAPType is either TTLS or PEAP</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="PEAPVersion" cond="Profile7SecurityType==Enterprise &amp;&amp; Profile7EAPType==PEAP">
         <Name>Profile7PEAPVersion</Name>
         <Default></Default>
         <Desc>Profile7 PEAP version. Single selection between Version0 and Version1</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="iu" size="4" valtype="EAPFastProvisioning" cond="Profile7SecurityType==Enterprise &amp;&amp; Profile7EAPType==FAST">
         <Name>Profile7EAPFastProvisioning</Name>
         <Default></Default>
         <Desc>Profile7 EAP Fast provosioning. Single selection between Unauthenticated and Authenticated</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="Profile7SecurityType==Enterprise" script="Profile7EAPSubType | Profile7PEAPVersion | Profile7EAPFastProvisioning">
         <Name>Profile7EapMethod</Name>
         <Default></Default>
         <Desc>Profile7 EAP Method. This is a mask collection of EAPSubType, PEAPVersion and EAPFastProvisioning</Desc>
         <Offset>3428</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile7SecurityType)" script="if (Profile7SecurityType==WPA) {1;} else {0;}">
         <Name>Profile7PmkSet</Name>
         <Default>0</Default>
         <Desc>Profile7 PMK set. 0x1 for WPA, 0x0 for others.</Desc>
         <Offset>3280</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile7SecurityType)" script="if (Profile7SecurityType==Open || Profile7SecurityType==WEP || Profile7SecurityType==Peer2Peer) {0;} else if (Profile7SecurityType==WPA || Profile7SecurityType==Enterprise) {18;}">
         <Name>Profile7PairwiseCipher</Name>
         <Default>0</Default>
         <Desc>Profile7 Pairwise cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>3288</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile7SecurityType)" script="if (Profile7SecurityType==Open || Profile7SecurityType==WEP || Profile7SecurityType==Peer2Peer) {0;} else if (Profile7SecurityType==WPA || Profile7SecurityType==Enterprise) {18;}">
         <Name>Profile7GroupCipher</Name>
         <Default>0</Default>
         <Desc>Profile7 Group cipher suite. Multiple selection between TKIP=0x8 and CCMP=0x10</Desc>
         <Offset>3292</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile7SecurityType)" script="if (Profile7SecurityType==Open || Profile7SecurityType==WEP || Profile7SecurityType==Peer2Peer) {4;} else if (Profile7SecurityType==Enterprise) {1;} else if (Profile7SecurityType==WPA) {2;}">
         <Name>Profile7KeyManagement</Name>
         <Default>4</Default>
         <Desc>Profile7 Key management suite. Multiple selection between 8021X=0x1, PSK=0x2 and NONE=0x4</Desc>
         <Offset>3296</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile7SecurityType)" script="if (Profile7SecurityType==Open || Profile7SecurityType==WEP || Profile7SecurityType==Peer2Peer) {0;} else if (Profile7SecurityType==WPA || Profile7SecurityType==Enterprise) {3;}">
         <Name>Profile7SecProto</Name>
         <Default>0</Default>
         <Desc>Profile7 Security Protocol suite. Multiple selection between WPA=0x1 and RSN=0x2</Desc>
         <Offset>3300</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile7SecurityType)" script="if (Profile7SecurityType==WPA || Profile7SecurityType==Enterprise) {1;} else {0;}">
         <Name>Profile7AuthAlgo</Name>
         <Default>0</Default>
         <Desc>Profile7 authentication algo. 0x1 for WPA and Enterprise, 0x0 for others.</Desc>
         <Offset>3304</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile7SecurityType)" script="if (Profile7SecurityType==Peer2Peer) {0;} else {1;}">
         <Name>Profile7ScanSSID</Name>
         <Default>0</Default>
         <Desc>Profile7 scan SSID with Probe Requests. 0x0 for Peer2Peer, 0x1 for others.</Desc>
         <Offset>3308</Offset>
      </Param>
      <Param type="xl" size="4" hidden="true" cond="!(!Profile7SecurityType)" script="if (Profile7SecurityType==Enterprise) {3;} else {0;}">
         <Name>Profile7EapFlags</Name>
         <Default>3</Default>
         <Desc>Profile7 EAPOL flags. 0x3 for Enterprise, 0x0 for others.</Desc>
         <Offset>3312</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile7SecurityType)" script="if (Profile7SecurityType==Enterprise) {1398;} else {0;}">
         <Name>Profile7EapFragmentSize</Name>
         <Default>1398</Default>
         <Desc>Profile7 EAP fragment size. 1398 for Enterprise, 0 for others.</Desc>
         <Offset>3424</Offset>
      </Param>
      <Param type="d" size="4" hidden="true" cond="!(!Profile7SecurityType)" script="if (Profile7SecurityType==Enterprise) {-1;} else {0;}">
         <Name>Profile7EapWA</Name>
         <Default>-1</Default>
         <Desc>Profile7 EAP workaround. -1 for Enterprise, 0 for others.</Desc>
         <Offset>3640</Offset>
      </Param>
      <Param type="u" size="4" hidden="true" cond="!(!Profile7SecurityType)" script="if (Profile7SecurityType==WPA) {1;} else {0;}">
         <Name>Profile7WpaHandshake</Name>
         <Default>1</Default>
         <Desc>Profile7 WPA peer key handshake. 1 for WPA, 0 for others.</Desc>
         <Offset>3652</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile7SecurityType) &amp;&amp; ( !(!Profile7EAPType) || !(!Profile7EAPSubType) )" script="if (Profile7SecurityType==Enterprise &amp;&amp; (Profile7EAPType==TLS || Profile7EAPSubType==TLS_subtype)) {1;} else {0;}">
         <Name>Profile7EapClientCert</Name>
         <Default>1</Default>
         <Desc>Profile7 client certificate ID. 1 for TLS based, 0 for others.</Desc>
         <Offset>3441</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile7SecurityType) &amp;&amp; ( !(!Profile7EAPType) || !(!Profile7EAPSubType) )" script="if (Profile7SecurityType==Enterprise &amp;&amp; (Profile7EAPType==TLS || Profile7EAPSubType==TLS_subtype)) {2;} else {0;}">
         <Name>Profile7EapPrivateKey</Name>
         <Default>1</Default>
         <Desc>Profile7 client private key ID. 2 for TLS based, 0 for others.</Desc>
         <Offset>3442</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" cond="!(!Profile7SecurityType) &amp;&amp; !(!Profile7EAPType)" script="if (Profile7SecurityType==Enterprise &amp;&amp; Profile7EAPType==FAST) {3;} else {0;}">
         <Name>Profile7EapFastPac</Name>
         <Default>3</Default>
         <Desc>Profile7 client PAC for Fast. 3 for FAST, 0 for others.</Desc>
         <Offset>3443</Offset>
      </Param>
      <Param type="u" size="1" hidden="true" valtype="Range_0-15">
         <Name>DefaultGroupId</Name>
         <Default>0</Default>
         <Desc>Default Group ID for Smart Config. Always 0</Desc>
         <Offset>20</Offset>
      </Param>
      <Param type="sn" size="16" script="assertExactLen(16,DefaultGroupKey)">
         <Name>DefaultGroupKey</Name>
         <Default></Default>
         <Desc>Default group AES key for Smart Config. Should be 16 bytes long</Desc>
         <Offset>24</Offset>
      </Param>
      <Param type="u" size="2" hidden="true" cond="!(!DefaultGroupKey)" script="DefaultGroupKey.length">
         <Name>DefaultGroupKeyLen</Name>
         <Default></Default>
         <Desc>Default group AES key length for Smart Config</Desc>
         <Offset>22</Offset>
      </Param>
      <Param type="u" size="1" valtype="Range_1-15">
         <Name>GroupId1</Name>
         <Default></Default>
         <Desc>1st Group ID for Smart Config. Number between 1-15</Desc>
         <Offset>40</Offset>
      </Param>
      <Param type="sn" size="16" script="assertExactLen(16,GroupKey1)">
         <Name>GroupKey1</Name>
         <Default></Default>
         <Desc>1st group AES key for Smart Config. Should be 16 bytes long</Desc>
         <Offset>44</Offset>
      </Param>
      <Param type="u" size="2" hidden="true" cond="!(!GroupKey1)" script="GroupKey1.length">
         <Name>GroupKey1Len</Name>
         <Default></Default>
         <Desc>1st group AES key length for Smart Config</Desc>
         <Offset>42</Offset>
      </Param>
      <Param type="u" size="1" valtype="Range_1-15">
         <Name>GroupId2</Name>
         <Default></Default>
         <Desc>2nd Group ID for Smart Config. Number between 1-15</Desc>
         <Offset>60</Offset>
      </Param>
      <Param type="sn" size="16" script="assertExactLen(16,GroupKey2)">
         <Name>GroupKey2</Name>
         <Default></Default>
         <Desc>2nd group AES key for Smart Config. Should be 16 bytes long</Desc>
         <Offset>64</Offset>
      </Param>
      <Param type="u" size="2" hidden="true" cond="!(!GroupKey2)" script="GroupKey2.length">
         <Name>GroupKey2Len</Name>
         <Default></Default>
         <Desc>2nd group AES key length for Smart Config</Desc>
         <Offset>62</Offset>
      </Param>
      <Param type="xl" size="4" valtype="Channels">
         <Name>ScanChannelMask</Name>
         <Default>1FFF</Default>
         <Desc>Channels mask for scan process. Multiple choice between Channel1-Channel13</Desc>
         <Offset>12</Offset>
      </Param>
      <Param type="d" size="4" script="assertIsNumeric(ScanRSSIThreshold); (ScanRSSIThreshold > 0 ? -ScanRSSIThreshold : ScanRSSIThreshold).toString(10);">
         <Name>ScanRSSIThreshold</Name>
         <Default>-95</Default>
         <Desc>RSSI threshold for scan process [in dBm]. Negative number represented in 2's complement</Desc>
         <Offset>60</Offset>
      </Param>
      <Param type="u" size="4" valtype="State">
         <Name>ConnectToOpenAP</Name>
         <Default>Disable</Default>
         <Desc>Setting this option enables connecting to any open AP</Desc>
         <Offset>68</Offset>
      </Param>
      <Param type="u" size="4" valtype="State">
         <Name>ConnectToAnyPeer2Peer</Name>
         <Default>Disable</Default>
         <Desc>Setting this option enables connecting to any Peer 2 Peer device</Desc>
         <Offset>72</Offset>
      </Param>
      <Param type="u" size="4" valtype="State">
         <Name>FastConnectEnable</Name>
         <Default>Disable</Default>
         <Desc>Setting this option enables Fast Connection</Desc>
         <Offset>76</Offset>
      </Param>
      <Param type="u" size="4" valtype="State">
         <Name>AutoStartEnable</Name>
         <Default>Enable</Default>
         <Desc>Setting this option enables connecting according to stored Profiles</Desc>
         <Offset>84</Offset>
      </Param>
      <Param type="u" size="4" valtype="Range_0-15">
         <Name>Peer2PeerIntent</Name>
         <Default>7</Default>
         <Desc>Score indicating how eager the device is to become Peer2Peer client vs. Peer2Peer Group Owner. Number between 0-15 where 0 indicates Client and 15 indicates Group Owner</Desc>
         <Offset>88</Offset>
      </Param>
      <Param type="u" size="4" valtype="P2pNegInit">
         <Name>Peer2PeerNegotiationInitiator</Name>
         <Default>Random</Default>
         <Desc>Policy for initialing negotiation request once a preferred device found. Single selection between Active, Passive and Random Back off</Desc>
         <Offset>96</Offset>
      </Param>
      <Param type="u" size="4" valtype="State">
         <Name>AutoSmartConfig</Name>
         <Default>Enable</Default>
         <Desc>Disable or Enable Smart Config upon init</Desc>
         <Offset>100</Offset>
      </Param>
      <Param type="st" size="17" hidden="true">
         <Name>Peer2PeerDeviceType</Name>
         <Default>1-0050F204-1</Default>
         <Desc>Denotes the Peer2Peer device type. Use the default always - &quot;1-0050F204-1&quot;.</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="1" hidden="true">
         <Name>Peer2PeerListenRegClass</Name>
         <Default>81</Default>
         <Desc>The device listen band during Peer2Peer discovery phase. Should always be 81 which is 2.4GHz band</Desc>
         <Offset>17</Offset>
      </Param>
      <Param type="u" size="1" valtype="P2pDeviceChannelsVal">
         <Name>Peer2PeerListenChannels</Name>
         <Default>1</Default>
         <Desc>The device listen channel during Peer2Peer discovery phase. Should be one of the social channels, 1, 6 or 11</Desc>
         <Offset>18</Offset>
      </Param>
      <Param type="u" size="1" hidden="true">
         <Name>Peer2PeerOperRegClass</Name>
         <Default>81</Default>
         <Desc>The device operation band following Peer2Peer connection. Should always be 81 which is 2.4GHz band</Desc>
         <Offset>19</Offset>
      </Param>
      <Param type="u" size="1" valtype="P2pDeviceChannelsVal">
         <Name>Peer2PeerOperChannels</Name>
         <Default>1</Default>
         <Desc>The device operation channel following Peer2Peer connection. Should be one of the social channels, 1, 6 or 11</Desc>
         <Offset>20</Offset>
      </Param>
      <Param type="xb" size="10" valtype="PowerPolicy">
         <Name>PowerPolicy</Name>
         <Default>PM_NORMAL</Default>
         <Desc>Power policy of the device. Single selection between PM_NORMAL, PM_ACTIVE and PM_LONG_SLEEP. Applicable for Station and Peer2Peer client roles only</Desc>
         <Offset>0</Offset>
      </Param>
      <Param type="u" size="2" cond="PowerPolicy==PM_LONG_SLEEP" script="assertIsNumeric(LongSleepInterval)">
         <Name>LongSleepInterval</Name>
         <Default></Default>
         <Desc>Denotes the desired sleep interval between two consecutive wakeups for beacon reception. Interval in mSec units. Applicable for Station and Peer2Peer client roles only</Desc>
         <Offset>6</Offset>
      </Param>
   </ParamList>
</CC3xxx>
