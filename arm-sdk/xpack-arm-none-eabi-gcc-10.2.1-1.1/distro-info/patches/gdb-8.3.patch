--- bfd/Makefile.in	2020-03-07 16:41:23.000000000 +0200
+++ bfd/Makefile.in	2020-03-07 16:43:39.000000000 +0200
@@ -2080,7 +2080,7 @@
 	fi ;\
 	$(SED) -e "s,@bfd_version@,$$bfd_version," \
 	    -e "s,@bfd_version_string@,$$bfd_version_string," \
-	    -e "s,@bfd_version_package@,$$bfd_version_package," \
+	    -e "s|@bfd_version_package@|$$bfd_version_package|" \
 	    -e "s,@report_bugs_to@,$$report_bugs_to," \
 	    < $(srcdir)/version.h > $@; \
 	echo "$${bfd_soversion}" > libtool-soversion
--- gdb/python/lib/gdb/command/prompt.py	2019-10-26 03:03:38.000000000 +0300
+++ gdb/python/lib/gdb/command/prompt-patched.py	2020-01-27 18:09:25.000000000 +0200
@@ -45,7 +45,7 @@
         self.hook_set = False
 
     def get_show_string (self, pvalue):
-        if self.value is not '':
+        if self.value != '':
            return "The extended prompt is: " + self.value
         else:
            return "The extended prompt is not set."
@@ -57,7 +57,7 @@
         return ""
 
     def before_prompt_hook(self, current):
-        if self.value is not '':
+        if self.value != '':
             return gdb.prompt.substitute_prompt(self.value)
         else:
             return None

--- gdb/python/python-config.py	2018-05-05 00:32:36.000000000 +0300
+++ gdb/python/python-config-patched.py	2020-03-09 11:56:20.000000000 +0200
@@ -3,6 +3,7 @@
 
 import sys
 import os
+import platform
 import getopt
 from distutils import sysconfig
 
@@ -45,16 +46,29 @@
 
 for opt in opt_flags:
     if opt == '--prefix':
-        print (to_unix_path(sysconfig.PREFIX))
+        prefix=os.environ.get('CONFIG_PYTHON_PREFIX')
+        if prefix and prefix.strip():
+            sys.stderr.write ("%s -> [%s]\n" % (opt, prefix.strip()))
+            print (prefix.strip())
+        else:
+            sys.stderr.write ("%s -> [%s]\n" % (opt, to_unix_path(sysconfig.PREFIX)))
+            print (to_unix_path(sysconfig.PREFIX))
 
     elif opt == '--exec-prefix':
-        print (to_unix_path(sysconfig.EXEC_PREFIX))
+        prefix=os.environ.get('CONFIG_PYTHON_PREFIX')
+        if prefix and prefix.strip():
+            sys.stderr.write ("%s -> [%s]\n" % (opt, prefix.strip()))
+            print (prefix.strip())
+        else:
+            sys.stderr.write ("%s -> [%s]\n" % (opt, to_unix_path(sysconfig.EXEC_PREFIX)))
+            print (to_unix_path(sysconfig.EXEC_PREFIX))
 
     elif opt in ('--includes', '--cflags'):
         flags = ['-I' + sysconfig.get_python_inc(),
                  '-I' + sysconfig.get_python_inc(plat_specific=True)]
         if opt == '--cflags':
             flags.extend(getvar('CFLAGS').split())
+        sys.stderr.write ("%s -> [%s]\n" % (opt, to_unix_path(' '.join(flags))))
         print (to_unix_path(' '.join(flags)))
 
     elif opt in ('--libs', '--ldflags'):
@@ -73,5 +87,7 @@
                     libs.insert(0, '-L' + sysconfig.PREFIX + '/libs')
             if getvar('LINKFORSHARED') is not None:
                 libs.extend(getvar('LINKFORSHARED').split())
-        print (to_unix_path(' '.join(libs)))
+        tmp = to_unix_path(' '.join(libs))
+        sys.stderr.write ("%s -> [%s]\n" % (opt, tmp))
+        print (tmp)
 

--- gdb/python/lib/gdb/__init__.py
+++ gdb/python/lib/gdb/__init__-patched.py
@@ -106,6 +106,32 @@ def _execute_unwinders(pending_frame):
 
     return None
 
+def _execute_file(filepath):
+    """This function is used to replace Python 2's PyRun_SimpleFile.
+
+    Loads and executes the given file.
+
+    We could use the runpy module, but its documentation says:
+    "Furthermore, any functions and classes defined by the executed code are
+    not guaranteed to work correctly after a runpy function has returned."
+    """
+    globals = sys.modules['__main__'].__dict__
+    set_file = False
+    # Set file (if not set) so that the imported file can use it (e.g. to
+    # access file-relative paths). This matches what PyRun_SimpleFile does.
+    if not hasattr(globals, '__file__'):
+        globals['__file__'] = filepath
+        set_file = True
+    try:
+        with open(filepath, 'rb') as file:
+            # We pass globals also as locals to match what Python does
+            # in PyRun_SimpleFile.
+            compiled = compile(file.read(), filepath, 'exec')
+            exec(compiled, globals, globals)
+    finally:
+        if set_file:
+            del globals['__file__']
+
 
 # Convenience variable to GDB's python directory
 PYTHONDIR = os.path.dirname(os.path.dirname(__file__))

--- gdb/python/python.c
+++ gdb/python/python-patched.c
@@ -323,9 +323,8 @@ python_interactive_command (const char *arg, int from_tty)
    A FILE * from one runtime does not necessarily operate correctly in
    the other runtime.
 
-   To work around this potential issue, we create on Windows hosts the
-   FILE object using Python routines, thus making sure that it is
-   compatible with the Python library.  */
+   To work around this potential issue, we run code in Python to load
+   the script.  */
 
 static void
 python_run_simple_file (FILE *file, const char *filename)
@@ -339,15 +338,21 @@ python_run_simple_file (FILE *file, const char *filename)
   /* Because we have a string for a filename, and are using Python to
      open the file, we need to expand any tilde in the path first.  */
   gdb::unique_xmalloc_ptr<char> full_path (tilde_expand (filename));
-  gdbpy_ref<> python_file (PyFile_FromString (full_path.get (), (char *) "r"));
-  if (python_file == NULL)
+
+  if (gdb_python_module == nullptr
+      || ! PyObject_HasAttrString (gdb_python_module, "_execute_file"))
+    error (_("Installation error: gdb._execute_file function is missing"));
+
+  gdbpy_ref<> return_value
+    (PyObject_CallMethod (gdb_python_module, "_execute_file", "s",
+                         full_path.get ()));
+  if (return_value == nullptr)
     {
-      gdbpy_print_stack ();
-      error (_("Error while opening file: %s"), full_path.get ());
+      /* Use PyErr_PrintEx instead of gdbpy_print_stack to better match the
+         behavior of the non-Windows codepath.  */
+      PyErr_PrintEx(0);
     }
 
-  PyRun_SimpleFile (PyFile_AsFile (python_file.get ()), filename);
-
 #endif /* _WIN32 */
 }
 
